<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SAN.UI.DataGridView</name>
    </assembly>
    <members>
        <member name="T:SAN.UI.DataGridView.BindingListView`1">
            <summary>
            Wrapper for any <see cref="T:System.Collections.IList"/> which implements
            <see cref="T:System.ComponentModel.IBindingListView"/> and <see cref="T:System.ComponentModel.ITypedList"/>
            for usage in the <see cref="N:SAN.UI.DataGridView"/>.
            The contained <see cref="T:System.Collections.IList"/> can explicitely be specified,
            otherwise a normal <see cref="T:System.Collections.ArrayList"/> is created internally.
            If changes to this list are made calling <see cref="M:SAN.UI.DataGridView.BindingListView`1.RaiseListChanged"/>
            will raise a notification for the change. Using the list
            manipulation methods in this class will do this automatically.
            The <see cref="T:System.ComponentModel.IBindingListView"/> will operate on lists of
            a certain type which must be specified. If the list contains instances
            of other types than the one specified then it will not work correctly.
            Searching and indexing operations are not implemented.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.#ctor">
            <summary>
            Creates a new instance with an empty <see cref="P:SAN.UI.DataGridView.BindingListView`1.InnerList"/>.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.#ctor(System.Collections.IList)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="list">The <see cref="P:SAN.UI.DataGridView.BindingListView`1.InnerList"/> to be used.</param>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.InnerList">
            <summary>
            Gets the contained <see cref="T:System.Collections.IList"/> actually
            holding the data.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.RaiseListChanged">
            <summary>
            Raises the <see cref="E:SAN.UI.DataGridView.BindingListView`1.ListChanged"/> event with <see cref="F:System.ComponentModel.ListChangedType.Reset"/>.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.RaiseListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:SAN.UI.DataGridView.BindingListView`1.ListChanged"/> event with the specified arguments.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:SAN.UI.DataGridView.BindingListView`1.ListChanged"/> event.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
            <summary>
            Sorts the data source based on the given <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/>.
            </summary>
            <param name="sorts">
            The <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/> containing 
            the sorts to apply to the data source.
            </param>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.Filter">
            <summary>
            Gets or sets the filter to be used to exclude items from the collection 
            of items returned by the data source.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.RemoveFilter">
            <summary>
            Removes the current filter applied to the data source.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.SortDescriptions">
            <summary>
            Gets the collection of sort descriptions currently applied to the data source.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.SupportsAdvancedSorting">
            <summary>
            Gets a value indicating whether the data source supports advanced sorting.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.SupportsFiltering">
            <summary>
            Gets a value indicating whether the data source supports filtering.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.BindingListView`1.ListChanged">
            <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.AllowEdit">
            <summary>
            Gets whether you can update items in the list.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.AllowNew">
            <summary>
            Gets whether you can add items to the list using <see cref="M:SAN.UI.DataGridView.BindingListView`1.AddNew"/>.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.AllowRemove">
            <summary>
            Gets whether you can remove items from the list, using 
            <see cref="M:SAN.UI.DataGridView.BindingListView`1.Remove(System.Object)"/> or <see cref="M:SAN.UI.DataGridView.BindingListView`1.RemoveAt(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the list based on a PropertyDescriptor and a ListSortDirection.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to sort by.</param>
            <param name="direction">One of the <see cref="T:System.ComponentModel.ListSortDirection"/> values.</param>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.IsSorted">
            <summary>
            Gets whether the items in the list are sorted.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.RemoveSort">
            <summary>
            Removes any sort applied using <see cref="M:SAN.UI.DataGridView.BindingListView`1.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)"/>.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.SortDirection">
            <summary>
            Gets the direction of the sort.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.SortProperty">
            <summary>
            Gets the <see cref="T:System.ComponentModel.PropertyDescriptor"/> that is being used for sorting.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.SupportsChangeNotification">
            <summary>
            Gets whether a <see cref="E:SAN.UI.DataGridView.BindingListView`1.ListChanged"/> event is raised when the 
            list changes or an item in the list changes.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.SupportsSearching">
            <summary>
            Gets whether the list supports searching using the <see cref="M:SAN.UI.DataGridView.BindingListView`1.Find(System.ComponentModel.PropertyDescriptor,System.Object)"/> method.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.SupportsSorting">
            <summary>
            Gets whether the list supports sorting.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Adds the <see cref="T:System.ComponentModel.PropertyDescriptor"/> to the indexes used for searching.
            NOT IMPLEMENTED!
            </summary>
            <param name="property">
            The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to add to the indexes used for searching.
            </param>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.AddNew">
            <summary>
            Adds a new item to the list.
            NOT IMPLEMENTED!
            </summary>
            <returns>The item added to the list.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Returns the index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            NOT IMPLEMENTED!
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to search on.</param>
            <param name="key">The value of the property parameter to search for.</param>
            <returns>The index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor"/>.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Removes the <see cref="T:System.ComponentModel.PropertyDescriptor"/> from the indexes used for searching.
            NOT IMPLEMENTED!
            </summary>
            <param name="property">
            The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to remove from the indexes used for searching.
            </param>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.  
            </summary>
            <param name="value">The instance to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.IList"/>.  
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <param name="value">The instance to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>true if the instance is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>. 
            </summary>
            <param name="value">The instance to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The instance to insert into the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size. 
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> is read-only.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>. 
            </summary>
            <param name="value">The instance to remove from the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, 
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>. 
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is 
            synchronized (thread safe). 
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.BindingListView`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>. 
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate 
            through the collection.
            </returns>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the 
            properties on each item used to bind data.
            </summary>
            <param name="listAccessors">
            An array of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects to find in the collection 
            as bindable. This can be a null reference.
            </param>
            <returns>The <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the 
            properties on each item used to bind data.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.BindingListView`1.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the name of the list.
            </summary>
            <param name="listAccessors">
            An array of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects, for which the list 
            name is returned. This can be a null reference.
            </param>
            <returns>The name of the list.</returns>
        </member>
        <member name="T:SAN.UI.DataGridView.DataFilter">
            <summary>
            Public Wrapper for the internal DataExpression class in the .Net framework.
            The purpose of this class is to test if single <see cref="T:System.Data.DataRow"/>s match
            a given filter expression.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DataFilter.#ctor(System.String,System.Data.DataTable)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="expression">Filter expression string.</param>
            <param name="dataTable"><see cref="T:System.Data.DataTable"/> of the rows to be tested.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DataFilter.Invoke(System.Data.DataRow)">
            <summary>
            Tests whether a single <see cref="T:System.Data.DataRow"/> matches the filter expression.
            </summary>
            <param name="row"><see cref="T:System.Data.DataRow"/> to be tested.</param>
            <returns>True if the row matches the filter expression, otherwise false.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.DataFilter.Invoke(System.Data.DataRow,System.Data.DataRowVersion)">
            <summary>
            Tests whether a single <see cref="T:System.Data.DataRow"/> matches the filter expression.
            </summary>
            <param name="row"><see cref="T:System.Data.DataRow"/> to be tested.</param>
            <param name="version">The row version to use.</param>
            <returns>True if the row matches the filter expression, otherwise false.</returns>
        </member>
        <member name="T:SAN.UI.DataGridView.LogManager">
            <summary>
            Setup and implements logs for internal logging
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.LogManager.basepath">
            <summary>
            Path to log file
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.LogManager.logheader">
            <summary>
            Header for log file name
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.LogManager.Categories">
            <summary>
            Define logging message categories
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.LogManager.#ctor(System.String,System.String)">
            <summary>
            Constructor, allow user to override path and name of logging file
            </summary>
            <param name="userbasepath"></param>
            <param name="userlogname"></param>
        </member>
        <member name="M:SAN.UI.DataGridView.LogManager.Log(SAN.UI.DataGridView.LogManager.Categories,System.String)">
            <summary>
            Log a message, using the provided category
            </summary>
            <param name="category"></param>
            <param name="msg"></param>
        </member>
        <member name="M:SAN.UI.DataGridView.LogManager.LogInfoMsg(System.String)">
            <summary>
            Log an informational message
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:SAN.UI.DataGridView.LogManager.LogErrorMsg(System.String)">
            <summary>
            Log an error message
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:SAN.UI.DataGridView.LogManager.Log(System.Exception)">
            <summary>
            Log an exception
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:SAN.UI.DataGridView.LogWriter">
            <summary>
            Do the actual log writing using setup info in Log Manager class
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.LogWriter.LogFileName(System.String)">
            <summary>
            Create standard log file name with "our" name format
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.LogWriter.Write(System.String,SAN.UI.DataGridView.LogManager.Categories,System.String,System.String,System.String)">
            <summary>
            Write the log entry to the file. Note that the log file is always flushed and closed. This
            will impact performance, but ensures that messages aren't lost
            </summary>
            <param name="from"></param>
            <param name="category"></param>
            <param name="msg"></param>
            <param name="path"></param>
            <param name="name"></param>
        </member>
        <member name="T:SAN.UI.DataGridView.DGVCellDrawingEventArgs">
            <summary>
            Class for the ownerdraw event. Provide the caller with the cell data, the current
            graphics context and the location in which to draw the cell.
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.CellOwnerDrawEventHandler">
            <summary>
            Delegate for ownerdraw cells - allow the caller to provide drawing for the cell
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SAN.UI.DataGridView.Extensions">
            <summary>
            Hold Extension methods
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.Extensions.DrawImbeddedImage``1(System.Collections.Generic.IEnumerable{``0},System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Printing.Margins)">
            <summary>
            Extension method to print all the "ImbeddedImages" in a provided list
            </summary>
            <typeparam name="??"></typeparam>
            <param name="list"></param>
            <param name="g"></param>
            <param name="pagewidth"></param>
            <param name="pageheight"></param>
            <param name="margins"></param>
        </member>
        <member name="T:SAN.UI.DataGridView.DGVPrinter">
            <summary>
            Data Grid View Printer. Print functions for a datagridview, since MS
            didn't see fit to do it.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.enablelogging">
            <summary>
            Enable logging of of the print process. Default is to log to a file named
            'DGVPrinter_yyyymmdd.Log' in the current directory. Since logging may have 
            an impact on performance, it should be used for troubleshooting purposes only.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DGVPrinter.LogDirectory">
            <summary>
            Allow the user to change the logging directory. Setting this enables logging by default.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.DGVPrinter.OwnerDraw">
            <summary>
            OwnerDraw Event declaration. Callers can subscribe to this event to override the 
            cell drawing.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter._Owner">
            <summary>
            provide an override for the print preview dialog "owner" field
            Note: Changed style for VS2005 compatibility
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter._PrintPreviewZoom">
            <summary>
            provide an override for the print preview zoom setting
            Note: Changed style for VS2005 compatibility
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DGVPrinter.PrintSettings">
            <summary>
            expose printer settings to allow access to calling program
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.printDialogSettings">
            <summary>
            expose settings for the PrintDialog displayed to the user
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.printerName">
            <summary>
            Set Printer Name
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DGVPrinter.printDocument">
            <summary>
            Allow access to the underlying print document
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.ppvIcon">
            <summary>
            Allow caller to set the upper-left corner icon used
            in the print preview dialog
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.previewdialog">
            <summary>
            Allow caller to set print preview dialog
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.printHeader">
            <summary>
            Flag to control whether or not we print the Page Header
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DGVPrinter.HeaderHeight">
            <summary>
            Determine the height of the header
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.printFooter">
            <summary>
            Flag to control whether or not we print the Page Footer
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.printColumnHeaders">
            <summary>
            Flag to control whether or not we print the Column Header line
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.printRowHeaders">
            <summary>
            Flag to control whether or not we print the Column Header line
            Defaults to False to match previous functionality
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.keepRowsTogether">
            <summary>
            Flag to control whether rows are printed whole or if partial
            rows should be printed to fill the bottom of the page. Turn this
            "Off" (i.e. false) to print cells/rows deeper than one page
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.keeprowstogethertolerance">
            <summary>
            How much of a row must show on the current page before it is 
            split when KeepRowsTogether is set to true.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.title">
            <summary>
            Title for this report. Default is empty.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.docName">
            <summary>
            Name of the document. Default is report title (can be empty)
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.titlefont">
            <summary>
            Font for the title. Default is Tahoma, 18pt.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.titlecolor">
            <summary>
            Foreground color for the title. Default is Black
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.titleformat">
            <summary>
            Allow override of the header cell format object
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DGVPrinter.TitleAlignment">
            <summary>
            Allow the user to override the title string alignment. Default value is 
            Alignment - Near; 
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DGVPrinter.TitleFormatFlags">
            <summary>
            Allow the user to override the title string format flags. Default values
            are: FormatFlags - NoWrap, LineLimit, NoClip
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.titleprint">
            <summary>
            Control where in the document the title prints
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DGVPrinter.TitleHeight">
            <summary>
            Return the title height based whether to print it or not
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.titlespacing">
            <summary>
            Mandatory spacing between the grid and the footer
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.titlebackground">
            <summary>
            Title Block Background Color
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.titleborder">
            <summary>
            Title Block Border
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.subtitle">
            <summary>
            SubTitle for this report. Default is empty.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.subtitlefont">
            <summary>
            Font for the subtitle. Default is Tahoma, 12pt.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.subtitlecolor">
            <summary>
            Foreground color for the subtitle. Default is Black
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.subtitleformat">
            <summary>
            Allow override of the header cell format object
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DGVPrinter.SubTitleAlignment">
            <summary>
            Allow the user to override the subtitle string alignment. Default value is 
            Alignment - Near; 
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DGVPrinter.SubTitleFormatFlags">
            <summary>
            Allow the user to override the subtitle string format flags. Default values
            are: FormatFlags - NoWrap, LineLimit, NoClip
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.subtitleprint">
            <summary>
            Control where in the document the title prints
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DGVPrinter.SubTitleHeight">
            <summary>
            Return the title height based whether to print it or not
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.subtitlespacing">
            <summary>
            Mandatory spacing between the grid and the footer
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.subtitlebackground">
            <summary>
            Title Block Background Color
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.subtitleborder">
            <summary>
            Title Block Border
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.footer">
            <summary>
            footer for this report. Default is empty.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.footerfont">
            <summary>
            Font for the footer. Default is Tahoma, 10pt.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.footercolor">
            <summary>
            Foreground color for the footer. Default is Black
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.footerformat">
            <summary>
            Allow override of the header cell format object
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DGVPrinter.FooterAlignment">
            <summary>
            Allow the user to override the footer string alignment. Default value is 
            Alignment - Center; 
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DGVPrinter.FooterFormatFlags">
            <summary>
            Allow the user to override the footer string format flags. Default values
            are: FormatFlags - NoWrap, LineLimit, NoClip
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.footerspacing">
            <summary>
            Mandatory spacing between the grid and the footer
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.footerprint">
            <summary>
            Control where in the document the title prints
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DGVPrinter.FooterHeight">
            <summary>
            Determine the height of the footer
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.footerbackground">
            <summary>
            Title Block Background Color
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.footerborder">
            <summary>
            Title Block Border
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.pageno">
            <summary>
            Include page number in the printout. Default is true.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.pagenofont">
            <summary>
            Font for the page number, Default is Tahoma, 8pt.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.pagenocolor">
            <summary>
            Text color (foreground) for the page number. Default is Black
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.pagenumberformat">
            <summary>
            Allow override of the header cell format object
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DGVPrinter.PageNumberAlignment">
            <summary>
            Allow the user to override the page number string alignment. Default value is 
            Alignment - Near; 
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DGVPrinter.PageNumberFormatFlags">
            <summary>
            Allow the user to override the pagenumber string format flags. Default values
            are: FormatFlags - NoWrap, LineLimit, NoClip
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.pagenumberontop">
            <summary>
            Allow the user to select whether to have the page number at the top or bottom
            of the page. Default is false: page numbers on the bottom of the page
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.pagenumberonseparateline">
            <summary>
            Should the page number be printed on a separate line, or printed on the
            same line as the header / footer? Default is false;
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.showtotalpagenumber">
            <summary>
            Show the total page number as n of total 
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.pageseparator">
            <summary>
            Text separating page number and total page number. Default is ' of '.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.pagenumberprint">
            <summary>
            Control where in the document the title prints
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DGVPrinter.PageNumberHeight">
            <summary>
            Determine the height of the footer
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.rowheadercellformat">
            <summary>
            Allow override of the row header cell format object
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.rowheadercelldefaulttext">
            <summary>
            Default value to show in the row header cell if no value is provided in the DataGridView.
            Defaults to one tab space
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.columnheaderstyles">
            <summary>
            Allow override of the header cell format object
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.columnheadercellformat">
            <summary>
            Allow override of the header cell format object
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.headercellalignment">
            <summary>
            Deprecated - use HeaderCellFormat
            Allow the user to override the header cell string alignment. Default value is 
            Alignment - Near; 
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.headercellformatflags">
            <summary>
            Deprecated - use HeaderCellFormat
            Allow the user to override the header cell string format flags. Default values
            are: FormatFlags - NoWrap, LineLimit, NoClip
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.cellformat">
            <summary>
            Allow override of the cell printing format
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.cellalignment">
            <summary>
            Deprecated - use GetCellFormat
            Allow the user to override the cell string alignment. Default value is 
            Alignment - Near; 
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.cellformatflags">
            <summary>
            Deprecated - use GetCellFormat
            Allow the user to override the cell string format flags. Default values
            are: FormatFlags - NoWrap, LineLimit, NoClip
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.colwidthsoverride">
            <summary>
            allow the user to override the column width calcs with their own defaults
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.colstyles">
            <summary>
            Allow per column style overrides
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.altrowcolstyles">
            <summary>
            Allow per column style overrides
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.fixedcolumns">
            <summary>
            Allow the user to set columns that appear on every pageset. Only used when 
            the printout is wider than one page.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.hidecolumns">
            <summary>
            List of columns to not display in the grid view printout.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.oldvalue">
            <summary>
            Insert a page break when the value in this column changes
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DGVPrinter.PrintMargins">
            <summary>
            Page margins override. Default is (60, 60, 40, 40)
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DGVPrinter.PageSettings">
            <summary>
            Expose the printdocument default page settings to the caller
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.porportionalcolumns">
            <summary>
            Spread the columns porportionally accross the page. Default is false.
            Deprecated. Please use the ColumnWidth property
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.DGVPrinter.tablealignment">
            <summary>
            Center the table on the page. 
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.DGVPrinter.RowHeightSetting">
            <summary>
            Change the default row height to either the height of the string or the size of 
            the cell. Added for image cell handling; set to CellHeight for image cells
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.DGVPrinter.ColumnWidthSetting">
            <summary>
            Change the default column width to be spread porportionally accross the page,
            to the size of the grid cell or the size of the formatted data string.
            Set to CellWidth for image cells.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.PreviewDisplayWidth">
            <summary>
            calculate the print preview window width to show the entire page
            </summary>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.PreviewDisplayHeight">
            <summary>
            calculate the print preview window height to show the entire page
            </summary>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.OnCellOwnerDraw(SAN.UI.DataGridView.DGVCellDrawingEventArgs)">
            <summary>
            Invoke any provided cell owner draw routines
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.GetStyle(System.Windows.Forms.DataGridViewRow,System.Windows.Forms.DataGridViewColumn)">
            <summary>
            Given a row and column, get the current grid cell style, including our local 
            overrides
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.GetColumnIndex(System.String)">
            <summary>
            Skim the colstoprint list for a column name and return it's index
            </summary>
            <param name="colname">Name of column to find</param>
            <returns>index of column</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.#ctor">
            <summary>
            Constructor for DGVPrinter
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.PrintDataGridView(System.Windows.Forms.DataGridView,System.Boolean)">
            <summary>
            Start the printing process, print to a printer.
            </summary>
            <param name="dgv">The DataGridView to print</param>
            NOTE: Any changes to this method also need to be done in PrintPreviewDataGridView
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.PrintPreviewDataGridView(System.Windows.Forms.DataGridView)">
            <summary>
            Start the printing process, print to a print preview dialog
            </summary>
            <param name="dgv">The DataGridView to print</param>
            NOTE: Any changes to this method also need to be done in PrintDataGridView
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.DisplayPrintDialog">
            <summary>
            Display a printdialog and return the result. Either this method or 
            the equivalent must be done prior to calling either of the PrintNoDisplay
            or PrintPreviewNoDisplay methods.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.PrintNoDisplay(System.Windows.Forms.DataGridView)">
            <summary>
            Print the provided grid view. Either DisplayPrintDialog() or it's equivalent
            setup must be completed prior to calling this routine
            </summary>
            <param name="dgv"></param>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.PrintPreviewNoDisplay(System.Windows.Forms.DataGridView)">
            <summary>
            Preview the provided grid view. Either DisplayPrintDialog() or it's equivalent
            setup must be completed prior to calling this routine
            </summary>
            <param name="dgv"></param>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.BeginPrintEventHandler(System.Object,System.Drawing.Printing.PrintEventArgs)">
            <summary>
            BeginPrint Event Handler
            Set values at start of print run
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.PrintPageEventHandler(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            PrintPage event handler. This routine prints one page. It will
            skip non-printable pages if the user selected the "some pages" option
            on the print dialog.
            </summary>
            <param name="sender">default object from windows</param>
            <param name="e">Event info from Windows about the printing</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.SetupPrint">
            <summary>
            Set up the print job. Save information from print dialog
            and print document for easy access. Also sets up the rows
            and columns that will be printed. At this point, we're 
            collecting all columns in colstoprint. This will be broken
            up into pagesets later on 
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.SetupColumns">
            <summary>
            Set up width override and fixed columns lists
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.SetupPrintRange">
            <summary>
            Determine the print range based on dialog selections and user input. The rows
            and columns are sorted to ensure that the rows appear in their correct index 
            order and the columns appear in DisplayIndex order to account for added columns
            and re-ordered columns.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.buildstringformat(System.Drawing.StringFormat@,System.Windows.Forms.DataGridViewCellStyle,System.Drawing.StringAlignment,System.Drawing.StringAlignment,System.Drawing.StringFormatFlags,System.Drawing.StringTrimming)">
            <summary>
            Centralize the string format settings. Build a string format object
            using passed in settings, (allowing a user override of a single setting)
            and get the alignment from the cell control style.
            </summary>
            <param name="format">String format, ref parameter with return settings</param>
            <param name="controlstyle">DataGridView style to apply (if available)</param>
            <param name="alignment">Override text Alignment</param>
            <param name="linealignment">Override line alignment</param>
            <param name="flags">String format flags</param>
            <param name="trim">Override string trimming flags</param>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.calccellsize(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCell,System.Windows.Forms.DataGridViewCellStyle,System.Single,System.Single,System.Drawing.StringFormat)">
            <summary>
            Calculate cell size based on data versus size settings
            </summary>
            <param name="g">Current graphics context</param>
            <param name="cell">Cell being measured</param>
            <param name="index">Column index of cell being measured</param>
            <param name="cellstyle">Computed Style of cell being measured</param>
            <param name="basewidth">Initial width for size calculation</param>
            <param name="format">Computed string format for cell data</param>
            <returns>Size of printed cell</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.RecalcRowHeights(System.Drawing.Graphics,System.Int32,System.Single)">
            <summary>
            Recalculate row heights for cells whose width is greater than the set column width. 
            Called when column widths are changed in order to flow text down the page instead of 
            accross.
            </summary>
            <param name="g">Graphics Context for measuring image columns</param>
            <param name="colindex">column index in colstoprint</param>
            <param name="newcolwidth">new column width</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.measureprintarea(System.Drawing.Graphics)">
            <summary>
            Scan all the rows and columns to be printed and calculate the 
            overall individual column width (based on largest column value), 
            the header sizes, and determine all the row heights.
            </summary>
            <param name="g">The graphics context for all measurements</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.AdjustPageSets(System.Drawing.Graphics,SAN.UI.DataGridView.DGVPrinter.PageDef)">
            <summary>
            Adjust column widths for fixed and porportional columns, set the 
            margins to enforce the selected tablealignment.
            </summary>
            <param name="g">The graphics context for all measurements</param>
            <param name="pageset">The pageset to adjust</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.Pagination">
            <summary>
            Set page breaks for the rows to be printed, and count total pages
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.DetermineHasMorePages">
            <summary>
            Check for more pages. This is called at the end of printing a page set.
            If there's another page set to print, we return true.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.PrintPage(System.Drawing.Graphics)">
            <summary>
            This routine prints one page. It will skip non-printable pages if the user 
            selected the "some pages" option on the print dialog. This is called during 
            the Print event.
            </summary>
            <param name="g">Graphics object to print to</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.PrintPageNo(System.Drawing.Graphics,System.Single)">
            <summary>
            Print the page number
            </summary>
            <param name="g"></param>
            <param name="printpos"></param>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.printsection(System.Drawing.Graphics,System.Single@,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.StringFormat,System.Boolean,SAN.UI.DataGridView.DGVPrinter.PageDef,System.Drawing.Brush,System.Drawing.Pen)">
            <summary>
            Print a header or footer section. Used for page numbers and titles
            </summary>
            <param name="g">Graphic context to print in</param>
            <param name="pos">Track vertical space used; 'y' location</param>
            <param name="text">String to print</param>
            <param name="font">Font to use for printing</param>
            <param name="color">Color to print in</param>
            <param name="format">String format for text</param>
            <param name="useroverride">True if the user overrode the alignment or flags</param>
            <param name="margins">The table's print margins</param>
            <param name="background">Background fill for the section; may be null for no background</param>
            <param name="border">Border for the section; may be null for no border</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.printfooter(System.Drawing.Graphics,System.Single@,SAN.UI.DataGridView.DGVPrinter.PageDef)">
            <summary>
            Print the footer. This handles the footer spacing, and printing the page number
            at the bottom of the page (if the page number is not in the header).
            </summary>
            <param name="g">Graphic context to print in</param>
            <param name="pos">Track vertical space used; 'y' location</param>
            <param name="margins">The table's print margins</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.printcolumnheaders(System.Drawing.Graphics,System.Single@,SAN.UI.DataGridView.DGVPrinter.PageDef)">
            <summary>
            Print the column headers. Most printing format info is retrieved from the 
            source DataGridView.
            </summary>
            <param name="g">Graphics Context to print within</param>
            <param name="pos">Track vertical space used; 'y' location</param>
            <param name="pageset">Current pageset - defines columns and margins</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.printrow(System.Drawing.Graphics,System.Single,System.Windows.Forms.DataGridViewRow,SAN.UI.DataGridView.DGVPrinter.PageDef,System.Single)">
            <summary>
            Print one row of the DataGridView. Most printing format info is retrieved
            from the DataGridView.
            </summary>
            <param name="g">Graphics Context to print within</param>
            <param name="pos">Track vertical space used; 'y' location</param>
            <param name="row">The row that will be printed</param>
            <param name="pageset">Current Pageset - defines columns and margins</param>
            <param name="startline">Line no. in row to start printing text at</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.DrawOwnerDrawCell(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.RectangleF,System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Allow override of cell drawing. This is to support grids that have onPaint
            overridden to do things like images in header rows and vertical printing
            </summary>
            <param name="g"></param>
            <param name="rowindex"></param>
            <param name="columnindex"></param>
            <param name="rectf"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.DrawCell(System.Drawing.Graphics,System.Drawing.RectangleF,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewCell,System.Single,System.Drawing.StringFormat,System.Drawing.Pen)">
            <summary>
            Draw a cell. Used for column and row headers and body cells.
            </summary>
            <param name="g"></param>
            <param name="cellprintarea"></param>
            <param name="style"></param>
            <param name="cell"></param>
            <param name="startlocation"></param>
            <param name="cellformat"></param>
            <param name="lines"></param>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.DrawCheckBoxCell(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCheckBoxCell,System.Drawing.RectangleF)">
            <summary>
            Draw a body cell that is a checkbox
            </summary>
            <param name="g"></param>
            <param name="checkboxcell"></param>
            <param name="rectf"></param>
        </member>
        <member name="M:SAN.UI.DataGridView.DGVPrinter.DrawImageCell(System.Drawing.Graphics,System.Windows.Forms.DataGridViewImageCell,System.Drawing.RectangleF)">
            <summary>
            Draw a body cell that has an imbedded image
            </summary>
            <param name="g"></param>
            <param name="imagecell"></param>
            <param name="rectf"></param>
        </member>
        <member name="T:SAN.UI.DataGridView.DataGridFilterExtender">
            <summary>
            Component which allows <see cref="P:SAN.UI.DataGridView.DataGridFilterExtender.DataGridView"/>s to be extended with
            autometed filter functionality.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.DataGridFilterExtender.AfterFiltersChanged">
            <summary>
            Event, which gets fired whenever the filter criteria has been changed.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.DataGridFilterExtender.BeforeFiltersChanging">
            <summary>
            Event, which gets fired whenever the filter criteria are going to be changed.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.DataGridFilterExtender.GridFilterBound">
            <summary>
            Event, which gets fired whenever an <see cref="T:SAN.UI.DataGridView.IGridFilter"/> has been bound
            and thus added to this instance.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.DataGridFilterExtender.GridFilterUnbound">
            <summary>
            Event, which gets fired whenever an <see cref="T:SAN.UI.DataGridView.IGridFilter"/> has been unbound
            and thus removed to this instance.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridFilterExtender.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates a new instance
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridFilterExtender.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridFilterExtender.Dispose(System.Boolean)">
            <summary> 
            Verwendete Ressourcen bereinigen.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridFilterExtender.InitializeComponent">
            <summary>
            Erforderliche Methode f|r die Designerunterst|tzung. 
            Der Inhalt der Methode darf nicht mit dem Code-Editor gedndert werden.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridFilterExtender.KeepFilters">
            <summary>
            Gets and sets whether filters are kept while switching between different tables.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridFilterExtender.AutoRefreshMode">
            <summary>
            Gets and sets whether the filter criteria is automatically refreshed when
            changes are made to the filter controls. If set to false then a call to
            <see cref="M:SAN.UI.DataGridView.DataGridFilterExtender.RefreshFilters"/> is needed to manually refresh the criteria.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridFilterExtender.FilterBoxPosition">
            <summary>
            Gets and sets the poisiton of the filter GUI elements.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridFilterExtender.AutoAdjustGridPosition">
            <summary>
            Sets whether the bounds of the extended DataGridView should be
            set automatically depending on where the filters are displayed,
            so that the totally covered area by grid and filters is always 
            the same.
            </summary>
            <remarks>
            This wont function correctly if the grid is docked
            </remarks>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridFilterExtender.FilterText">
            <summary>
            Gets and sets the text for the filter label.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridFilterExtender.FilterTextVisible">
            <summary>
            Gets and sets whether the filter label should be visible.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridFilterExtender.ControlBounds">
            <summary>
            The bounds of the control with the GUI for filtering
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridFilterExtender.NeededControlHeight">
            <summary>
            The Height of the control which is positioned for filtering
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridFilterExtender.FilterFactory">
            <summary>
            Gets and sets the <see cref="T:SAN.UI.DataGridView.IGridFilterFactory"/> used to generate the filter GUI.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridFilterExtender.Operator">
            <summary>
            The selected operator to combine the filter criterias.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridFilterExtender.MessageErrorMode">
            <summary>
            Gets and sets what information is showed to the user
            if an error in the builded filter criterias occurs.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridFilterExtender.ConsoleErrorMode">
            <summary>
            Gets and sets what information is showed to the user
            if an error in the builded filter criterias occurs.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridFilterExtender.BaseFilters">
            <summary>
            Gets a modifyable collection which maps <see cref="P:System.Data.DataTable.TableName"/>s
            to base filter strings which are applied in front of the automatically
            created filter.
            </summary>
            <remarks>
            The grid contents is not automatically refreshed when modifying this 
            collection. A call to <see cref="M:SAN.UI.DataGridView.DataGridFilterExtender.RefreshFilters"/> is needed for this.
            </remarks>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridFilterExtender.BaseFilterOperator">
            <summary>
            Gets or sets which operator should be used to combine the base filter
            with the automatically created filters.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridFilterExtender.BaseFilterEnabled">
            <summary>
            Gets or sets whether base filters should be used when refreshing
            the filter criteria. Setting it to false will disable the functionality
            while still keeping the base filter strings in the <see cref="P:SAN.UI.DataGridView.DataGridFilterExtender.BaseFilters"/>
            collection intact.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridFilterExtender.CurrentTableBaseFilter">
            <summary>
            Gets or sets the currently used base filter. Internally it adjusts the
            <see cref="P:SAN.UI.DataGridView.DataGridFilterExtender.BaseFilters"/> collection with the given value and the current
            <see cref="P:System.Data.DataTable.TableName"/> and also initiates a refresh.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridFilterExtender.DataGridView">
            <summary>
            Gets and sets the grid which should be extended.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridFilterExtender.GetGridFilters">
            <summary>
            Gets all currently set <see cref="T:SAN.UI.DataGridView.IGridFilter"/>s.
            </summary>
            <returns>Collection of <see cref="T:SAN.UI.DataGridView.IGridFilter"/>s.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridFilterExtender.ClearFilters">
            <summary>
            Clears all filters to initial state.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridFilterExtender.GetFilters">
            <summary>
            Gets all filters currently set
            </summary>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridFilterExtender.SetFilters(System.String[])">
            <summary>
            Sets all filters to the specified values.
            The values must be in order of the column styles in the current view.
            This function should normally be used with data previously coming
            from the <see cref="M:SAN.UI.DataGridView.DataGridFilterExtender.GetFilters"/> function.
            </summary>
            <param name="filter">filters to set</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridFilterExtender.RefreshFilters">
            <summary>
            Refreshes the filter criteria to match the current contents of the associated
            filter controls.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridFilterExtender.OnBeforeFiltersChanging(System.EventArgs)">
            <summary>
            Raises the <see cref="E:SAN.UI.DataGridView.DataGridFilterExtender.BeforeFiltersChanging"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridFilterExtender.OnAfterFiltersChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:SAN.UI.DataGridView.DataGridFilterExtender.AfterFiltersChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridFilterExtender.OnGridFilterBound(SAN.UI.DataGridView.GridFilterEventArgs)">
            <summary>
            Raises the <see cref="E:SAN.UI.DataGridView.DataGridFilterExtender.GridFilterBound"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridFilterExtender.OnGridFilterUnbound(SAN.UI.DataGridView.GridFilterEventArgs)">
            <summary>
            Raises the <see cref="E:SAN.UI.DataGridView.DataGridFilterExtender.GridFilterUnbound"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridFilterExtender.BeginInit">
            <summary>
            Sets a flag to true representing that the component is now initializing.
            </summary>
            <remarks>
            This is important as the component must know if the properties are set within
            the designer generated code so that no abnormal moving of the contained grid occurs
            when AutoAdjustGridPosition is set to true
            </remarks>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridFilterExtender.EndInit">
            <summary>
            Sets a flag to false representing that the initialization of the
            component has completed
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.DataGridViewEx">
            <summary>
            Control which embeds an <see cref="N:SAN.UI.DataGridView"/> and a
            <see cref="T:SAN.UI.DataGridView.DataGridFilterExtender"/> for providing automatic 
            filtering on all visible columns.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.DataGridViewEx.AfterFiltersChanged">
            <summary>
            Event, which gets fired whenever the filter criteria has been changed.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.DataGridViewEx.BeforeFiltersChanging">
            <summary>
            Event, which gets fired whenever the filter criteria are going to be changed.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.DataGridViewEx.GridFilterBound">
            <summary>
            Event, which gets fired whenever an <see cref="T:SAN.UI.DataGridView.IGridFilter"/> has been bound
            and thus added to this instance.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.DataGridViewEx.GridFilterUnbound">
            <summary>
            Event, which gets fired whenever an <see cref="T:SAN.UI.DataGridView.IGridFilter"/> has been unbound
            and thus removed to this instance.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridViewEx.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridViewEx.InitializeComponent">
            <summary> 
            Erforderliche Methode für die Designerunterstützung. 
            Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridViewEx.AutoRefreshMode">
            <summary>
            Gets and sets whether the filter criteria is automatically refreshed when
            changes are made to the filter controls. If set to false then a call to
            <see cref="M:SAN.UI.DataGridView.DataGridViewEx.RefreshFilters"/> is needed to manually refresh the criteria.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridViewEx.KeepFilters">
            <summary>
            Gets and sets whether filters are kept while switching between different tables.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridViewEx.EmbeddedDataGridView">
            <summary>
            Publishes the embedded <see cref="N:SAN.UI.DataGridView"/> to allow
            full control over its settings.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridViewEx.FilterBoxPosition">
            <summary>
            Gets and sets the poisiton of the filter GUI elements.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridViewEx.FilterFactory">
            <summary>
            Gets and sets the <see cref="T:SAN.UI.DataGridView.IGridFilterFactory"/> used to generate the filter GUI.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridViewEx.Operator">
            <summary>
            The selected operator to combine the filter criterias.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridViewEx.DataSource">
            <summary>
            Gets and sets the <see cref="T:System.ComponentModel.IBindingListView"/> which should be displayed in the grid.
            This is needed because only <see cref="T:System.ComponentModel.IBindingListView"/>s provide in built mechanisms
            to filter their content.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridViewEx.MessageErrorMode">
            <summary>
            Gets and sets what information is shown to the user
            if an error in the builded filter criterias occurs.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridViewEx.ConsoleErrorMode">
            <summary>
            Gets and sets what information is printed to the console
            if an error in the builded filter criterias occurs.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridViewEx.BaseFilters">
            <summary>
            Gets a modifyable collection which maps <see cref="P:System.Data.DataTable.TableName"/>s
            to base filter strings which are applied in front of the automatically
            created filter.
            </summary>
            <remarks>
            The grid contents is not automatically refreshed when modifying this 
            collection. A call to <see cref="M:SAN.UI.DataGridView.DataGridViewEx.RefreshFilters"/> is needed for this.
            </remarks>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridViewEx.BaseFilterOperator">
            <summary>
            Gets or sets which operator should be used to combine the base filter
            with the automatically created filters.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridViewEx.BaseFilterEnabled">
            <summary>
            Gets or sets whether base filters should be used when refreshing
            the filter criteria. Setting it to false will disable the functionality
            while still keeping the base filter strings in the <see cref="P:SAN.UI.DataGridView.DataGridViewEx.BaseFilters"/>
            collection intact.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.DataGridViewEx.CurrentTableBaseFilter">
            <summary>
            Gets or sets the currently used base filter. Internally it adjusts the
            <see cref="P:SAN.UI.DataGridView.DataGridViewEx.BaseFilters"/> collection with the given value and the current
            <see cref="P:System.Data.DataTable.TableName"/> and also initiates a refresh.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridViewEx.GetGridFilters">
            <summary>
            Gets all currently set <see cref="T:SAN.UI.DataGridView.IGridFilter"/>s.
            </summary>
            <returns>Collection of <see cref="T:SAN.UI.DataGridView.IGridFilter"/>s.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridViewEx.ClearFilters">
            <summary>
            Clears all filters to initial state.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridViewEx.GetFilters">
            <summary>
            Gets all filters currently set
            </summary>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridViewEx.SetFilters(System.String[])">
            <summary>
            Sets all filters to the specified values.
            The values must be in order of the column styles in the current view.
            This function should normally be used with data previously coming
            from the <see cref="M:SAN.UI.DataGridView.DataGridViewEx.GetFilters"/> function.
            </summary>
            <param name="filters">filters to set</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridViewEx.RefreshFilters">
            <summary>
            Refreshes the filter criteria to match the current contents of the associated
            filter controls.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridViewEx.OnBeforeFiltersChanging(System.EventArgs)">
            <summary>
            Raises the <see cref="E:SAN.UI.DataGridView.DataGridViewEx.BeforeFiltersChanging"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridViewEx.OnAfterFiltersChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:SAN.UI.DataGridView.DataGridViewEx.AfterFiltersChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridViewEx.OnGridFilterBound(SAN.UI.DataGridView.GridFilterEventArgs)">
            <summary>
            Raises the <see cref="E:SAN.UI.DataGridView.DataGridViewEx.GridFilterBound"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridViewEx.OnGridFilterUnbound(SAN.UI.DataGridView.GridFilterEventArgs)">
            <summary>
            Raises the <see cref="E:SAN.UI.DataGridView.DataGridViewEx.GridFilterUnbound"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridViewEx.Dispose(System.Boolean)">
            <summary> 
            Cleans up.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridViewEx.OnResize(System.EventArgs)">
            <summary>
            Repositions the grid to match the new size
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridViewEx.AddButtonColumn(System.String,System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Erzeugt eine ButtonColumn mit Icons für das Grid
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridViewEx.AddButtonColumn(System.String,System.Drawing.Image)">
            <summary>
            Erzeugt eine ButtonColumn mit Icons für das Grid
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.DataGridViewEx.AddButtonColumn(System.String)">
            <summary>
            Erzeugt eine ButtonColumn mit Textbeschreibung für das Grid
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SAN.UI.DataGridView.DataGridViewEx.AddComboboxColumn(System.String,System.Object,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:SAN.UI.DataGridView.DataGridViewEx.SetComboboxColumn(System.String,System.Object,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:SAN.UI.DataGridView.DataGridViewEx.createComboBox(System.String,System.Object,System.String,System.String)" -->
        <member name="T:SAN.UI.DataGridView.FilterErrorModes">
            <summary>
            Modes which determine the output generated when an error
            in the builded filter criterias occurs.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.FilterErrorModes.Off">
            <summary>
            No error output at all
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.FilterErrorModes.General">
            <summary>
            General error message
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.FilterErrorModes.ExceptionMessage">
            <summary>
            Message of the exception that occured
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.FilterErrorModes.StackTrace">
            <summary>
            StackTrace of the exception that occured
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.FilterErrorModes.All">
            <summary>
            All available output
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.FilterPosition">
            <summary>
            Enumeration representing the regions where the filter GUI elements
            are shown.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.FilterPosition.Top">
            <summary>
            Filter GUI above the grid.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.FilterPosition.Bottom">
            <summary>
            Filter GUI beyond the grid.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.FilterPosition.Off">
            <summary>
            Turns off the filter
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.GenericComparer">
            <summary>
            Implementation of the <see cref="T:System.Collections.IComparer"/> interface which
            compares according to a given <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/>.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GenericComparer.#ctor(System.ComponentModel.ListSortDescriptionCollection)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="sortDescriptions">
            The <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/> which should be
            used as the bassi for comparison.
            </param>
        </member>
        <member name="M:SAN.UI.DataGridView.GenericComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less 
            than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="T:SAN.UI.DataGridView.ImageHelper">
            <summary>
            Summary description for ImageHelper.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.ImageHelper.CreateGrayscaledBitmap(System.Drawing.Image)">
            <summary>
            Konvertiert ein Bild in ein Graustufen-Bild 
            </summary>
            <param name="image">Das so konvertierende Bild</param>
            <returns>Gibt eine Referenz auf ein Bitmap-Objekt zurück, das das in
            Graustufen konvertierte Bild enthält</returns>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilterCollection">
            <summary>
            Typesafe collection of <see cref="T:SAN.UI.DataGridView.IGridFilter"/>s.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterCollection.#ctor(System.Collections.IList,System.Collections.Hashtable)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="columns">List of <see cref="T:System.Windows.Forms.DataGridViewColumn"/>s which are associated with <see cref="T:SAN.UI.DataGridView.IGridFilter"/>s.</param>
            <param name="columnsToGridFiltersHash">Mapping between <see cref="T:System.Windows.Forms.DataGridViewColumn"/>s and <see cref="T:SAN.UI.DataGridView.IGridFilter"/>s.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterCollection.Contains(SAN.UI.DataGridView.IGridFilter)">
            <summary>
            Determines whether a given <see cref="T:SAN.UI.DataGridView.IGridFilter"/> is contained in this instance.
            </summary>
            <param name="gridFilter"><see cref="T:SAN.UI.DataGridView.IGridFilter"/> to be checked.</param>
            <returns>True if <see cref="T:SAN.UI.DataGridView.IGridFilter"/> is contained in this instance otherwise False.</returns>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterCollection.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterCollection.Item(System.Windows.Forms.DataGridViewColumn)">
            <summary>
            Gets the <see cref="T:SAN.UI.DataGridView.IGridFilter"/> which is associated with the given <see cref="T:System.Windows.Forms.DataGridViewColumn"/>.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterCollection.GetByName(System.String)">
            <summary>
            Gets a <see cref="T:SAN.UI.DataGridView.IGridFilter"/> which is associated with a <see cref="T:System.Windows.Forms.DataGridViewColumn"/>
            with the specified <see cref="P:System.Windows.Forms.DataGridViewColumn.Name"/>.
            </summary>
            <param name="name"><see cref="P:System.Windows.Forms.DataGridViewColumn.Name"/></param>
            <returns>An <see cref="T:SAN.UI.DataGridView.IGridFilter"/> or null if no appropriate was found.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterCollection.GetByHeaderText(System.String)">
            <summary>
            Gets a <see cref="T:SAN.UI.DataGridView.IGridFilter"/> which is associated with a <see cref="T:System.Windows.Forms.DataGridViewColumn"/>
            with the specified <see cref="P:System.Windows.Forms.DataGridViewColumn.HeaderText"/>.
            </summary>
            <param name="headerText"><see cref="P:System.Windows.Forms.DataGridViewColumn.HeaderText"/></param>
            <returns>An <see cref="T:SAN.UI.DataGridView.IGridFilter"/> or null if no appropriate was found.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterCollection.GetByDataPropertyName(System.String)">
            <summary>
            Gets a <see cref="T:SAN.UI.DataGridView.IGridFilter"/> which is associated with a <see cref="T:System.Windows.Forms.DataGridViewColumn"/>
            with the specified <see cref="P:System.Windows.Forms.DataGridViewColumn.DataPropertyName"/>.
            </summary>
            <param name="dataPropertyName"><see cref="P:System.Windows.Forms.DataGridViewColumn.DataPropertyName"/></param>
            <returns>An <see cref="T:SAN.UI.DataGridView.IGridFilter"/> or null if no appropriate was found.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterCollection.FilterByGridFilterType(System.Type,System.Boolean)">
            <summary>
            Creates a filtered list which only contains <see cref="T:SAN.UI.DataGridView.IGridFilter"/>s of the specified type.
            </summary>
            <param name="dataType">Type by which should be filtered.</param>
            <param name="exactMatch">Defines whether the types must match exactly
            (otherwise inheriting types will also be returned).</param>
            <returns>Collection of matching <see cref="T:SAN.UI.DataGridView.IGridFilter"/>s.</returns>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilterEventHandler">
            <summary>
            Delegate for use with <see cref="T:SAN.UI.DataGridView.GridFilterEventArgs"/>.
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilterEventArgs">
            <summary>
            Argumentsclass for events needing extended informations about <see cref="T:SAN.UI.DataGridView.IGridFilter"/>s.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterEventArgs.#ctor(System.Windows.Forms.DataGridViewColumn,SAN.UI.DataGridView.IGridFilter)">
            <summary>
            Creates a new instance
            </summary>
            <param name="column">Column the <see cref="T:SAN.UI.DataGridView.IGridFilter"/> is created for.</param>
            <param name="gridFilter">Default <see cref="T:SAN.UI.DataGridView.IGridFilter"/> instance.</param>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterEventArgs.DataType">
            <summary>
            Type of the column the <see cref="T:SAN.UI.DataGridView.IGridFilter"/> is created for.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterEventArgs.ColumnName">
            <summary>
            Name of the column the <see cref="T:SAN.UI.DataGridView.IGridFilter"/> is created for.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterEventArgs.Column">
            <summary>
            The column the <see cref="T:SAN.UI.DataGridView.IGridFilter"/> is created for.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterEventArgs.HeaderText">
            <summary>
            Text of the header of the column the <see cref="T:SAN.UI.DataGridView.IGridFilter"/> is created for.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterEventArgs.GridFilter">
            <summary>
            Gets/sets the <see cref="T:SAN.UI.DataGridView.IGridFilter"/> which should be used.
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory">
            <summary>
            Default implementation for <see cref="T:SAN.UI.DataGridView.IGridFilterFactory"/> which
            should be applicable for most standard needs.
            The creation process consists of these steps:
            1. If the column data type is an enumeration and <see cref="P:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.HandleEnumerationTypes"/>
            is set to true than an <see cref="T:SAN.UI.DataGridView.GridFilters.EnumerationGridFilter"/> is created.
            2. If <see cref="P:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.CreateDistinctGridFilters"/> is set to true than it is analyzed
            if the column contains less or equal distinct values than specified by
            <see cref="P:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.MaximumDistinctValues"/>. If yes than an <see cref="T:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter"/>
            is created. The <see cref="P:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.MaximumDistinctValues"/> property is not only 
            important to reduce the maximum number of entries the <see cref="T:System.Windows.Forms.ComboBox"/>
            gets filled with but also to improve performance because the analysis of the 
            columns data will be stopped immediately when more values are found then 
            specified by it and thus the analysis doesn't have to search through the whole 
            data source.
            3. If a grid filter type is specified for the data type of the column than this
            one will be created. The data type to grid filter type matching can be altered
            by calls to <see cref="M:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.AddGridFilter(System.Type,System.Type)"/> and <see cref="M:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.RemoveGridFilter(System.Type)"/>. Note 
            that only grid filter types which implement <see cref="T:SAN.UI.DataGridView.IGridFilter"/> and which 
            have an empty public constructor are allowed.
            4. If still no filter was created than the filter specified by
            <see cref="P:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.DefaultGridFilterType"/> will be created. By default this is the
            <see cref="T:SAN.UI.DataGridView.GridFilters.TextGridFilter"/>. Note that again only grid filter types which implement
            <see cref="T:SAN.UI.DataGridView.IGridFilter"/> and which have an empty public constructor are allowed.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.DefaultShowDateInBetweenOperator">
            <summary>
            Sets or gets whether created <see cref="T:SAN.UI.DataGridView.GridFilters.DateGridFilter"/>s should by default
            show the 'in between' operator.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.DefaultShowNumericInBetweenOperator">
            <summary>
            Sets or gets whether created <see cref="T:SAN.UI.DataGridView.GridFilters.NumericGridFilter"/>s should by default
            show the 'in between' operator.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.HandleEnumerationTypes">
            <summary>
            Gets/sets whether enumeration types are automatically handled
            with a special <see cref="T:SAN.UI.DataGridView.IGridFilter"/> implementation.
            Only applies for datatypes not explicitely set.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.DefaultGridFilterType">
            <summary>
            Gets and sets the <see cref="T:System.Type"/> of the IGridFilter which
            should handle all unspecified datatypes.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.CreateDistinctGridFilters">
            <summary>
            Gets or sets whether grid filters of type <see cref="T:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter"/>
            should be created automatically. Note that this might reduce performance
            as every column is analyzed to get the different values it contains.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.MaximumDistinctValues">
            <summary>
            Gets or sets the maximum number of distinct values column should have
            when a <see cref="T:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter"/> is created.
            If this limit is exceeded than a standard filter will be created.
            Value is only considered when <see cref="P:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.CreateDistinctGridFilters"/> is
            set to true.
            The value set must be set to 1 or greater. If all values contained within
            a column without any limitation should be generated than set this property
            to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.ConfigureDistinctGridFilterHandling(System.Boolean,System.Int32)">
            <summary>
            Sets <see cref="P:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.CreateDistinctGridFilters"/> and <see cref="P:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.MaximumDistinctValues"/>
            simultaneously to improve performance.
            </summary>
            <param name="createDistinctGridFilters">
            Indicator whether grid filters of type <see cref="T:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter"/>
            should be created automatically
            </param>
            <param name="maximumDistinctValues">
            Maximum number of distinct values column should have
            when a <see cref="T:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter"/> is created.
            </param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.AddGridFilter(System.Type,System.Type)">
            <summary>
            Adds a type for <see cref="T:SAN.UI.DataGridView.IGridFilter"/> for the
            specified datatype.
            </summary>
            <param name="dataType">
            <see cref="T:System.Type"/> for which a special <see cref="T:SAN.UI.DataGridView.IGridFilter"/> should be generated.
            </param>
            <param name="gridFilterType">
            <see cref="T:System.Type"/> of the <see cref="T:SAN.UI.DataGridView.IGridFilter"/> to be generated.
            </param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.RemoveGridFilter(System.Type)">
            <summary>
            Removes a specialized type for <see cref="T:SAN.UI.DataGridView.IGridFilter"/> for a given datatype.
            </summary>
            <param name="dataType">
            <see cref="T:System.Type"/> for which a special <see cref="T:SAN.UI.DataGridView.IGridFilter"/> should be removed.
            </param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.DefaultGridFilterFactory.CreateGridFilterInternal(System.Windows.Forms.DataGridViewColumn)">
            <summary>
            Creates a new instance of <see cref="T:SAN.UI.DataGridView.IGridFilter"/>.
            The concrete implementation depends on the given datatype.
            The parameters tablename and columnanem are ignored in this implementation.
            </summary>
            <param name="column">The <see cref="T:System.Data.DataColumn"/> for which the filter control should be created.</param>
            <returns>A <see cref="T:SAN.UI.DataGridView.IGridFilter"/>.</returns>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilterFactories.DistinctValuesGridFilterFactory">
            <summary>
            <see cref="T:SAN.UI.DataGridView.IGridFilterFactory"/> implementation which creates a
            <see cref="T:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter"/> on every column.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.DistinctValuesGridFilterFactory.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.DistinctValuesGridFilterFactory.CreateGridFilterInternal(System.Windows.Forms.DataGridViewColumn)">
            <summary>
            Return always a <see cref="T:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter"/>. 
            </summary>
            <param name="column">The <see cref="T:System.Data.DataColumn"/> for which the filter control should be created.</param>
            <returns>A <see cref="T:SAN.UI.DataGridView.IGridFilter"/>.</returns>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilterFactories.FullTextSearchGridFilterFactoryTextBox">
            <summary>
            Implementation of <see cref="T:SAN.UI.DataGridView.IGridFilterFactory"/> allowing
            to search in multiple columns with only one textbox. Without
            further customization this results in a fulltext-search in the
            whole grid.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.FullTextSearchGridFilterFactoryTextBox.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.GridFilterFactories.FullTextSearchGridFilterFactoryTextBox.Changed">
            <summary>
            Event for notification that the behaviour of this
            instance has changed.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.GridFilterFactories.FullTextSearchGridFilterFactoryTextBox.GridFilterCreated">
            <summary>
            Event for notification when a <see cref="T:SAN.UI.DataGridView.IGridFilter"/> has been
            created in order to use it in a specific column and to allow
            custom modifications to it.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.FullTextSearchGridFilterFactoryTextBox.BeginGridFilterCreation">
            <summary>
            Notifies this instance that the <see cref="T:SAN.UI.DataGridView.IGridFilter"/> creation process
            is being started.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.FullTextSearchGridFilterFactoryTextBox.EndGridFilterCreation">
            <summary>
            Notifies this instance that the <see cref="T:SAN.UI.DataGridView.IGridFilter"/> creation process
            has finished. After this call all created <see cref="T:SAN.UI.DataGridView.IGridFilter"/>s should
            be in a usable state.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.FullTextSearchGridFilterFactoryTextBox.CreateGridFilter(System.Windows.Forms.DataGridViewColumn)">
            <summary>
            Creates a new instance of <see cref="T:SAN.UI.DataGridView.GridFilters.TextGridFilter"/> and always
            specifies itself as the filter control. As a result all created filters
            will react upon changes in this instance.
            </summary>
            <param name="column">The <see cref="T:System.Data.DataColumn"/> for which the filter control should be created.</param>
            <returns>A <see cref="T:SAN.UI.DataGridView.GridFilters.TextGridFilter"/>.</returns>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilterFactories.GridFilterFactoryBase">
            <summary>
            Base implementation for <see cref="T:SAN.UI.DataGridView.IGridFilterFactory"/> handling
            most of the common tasks. Inheriting classes only need to override
            <see cref="M:SAN.UI.DataGridView.GridFilterFactories.GridFilterFactoryBase.CreateGridFilterInternal(System.Windows.Forms.DataGridViewColumn)"/>. 
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.GridFilterFactoryBase.#ctor">
            <summary>
            Base constructor.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.GridFilterFactoryBase.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:SAN.UI.DataGridView.GridFilterFactories.GridFilterFactoryBase.Changed"/> event.
            </summary>
            <param name="eventArgs">Event arguments</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.GridFilterFactoryBase.OnGridFilterCreated(SAN.UI.DataGridView.GridFilterEventArgs)">
            <summary>
            Raises the <see cref="E:SAN.UI.DataGridView.GridFilterFactories.GridFilterFactoryBase.GridFilterCreated"/> event.
            </summary>
            <param name="eventArgs">Event arguments</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.GridFilterFactoryBase.CreateGridFilterInternal(System.Windows.Forms.DataGridViewColumn)">
            <summary>
            Must be overridden by implementing classes.
            Should return a valid <see cref="T:SAN.UI.DataGridView.IGridFilter"/> for the specified arguments. 
            </summary>
            <param name="column">The <see cref="T:System.Data.DataColumn"/> for which the filter control should be created.</param>
            <returns>A <see cref="T:SAN.UI.DataGridView.IGridFilter"/>.</returns>
        </member>
        <member name="E:SAN.UI.DataGridView.GridFilterFactories.GridFilterFactoryBase.Changed">
            <summary>
            Event for notification that the behaviour of this
            instance has changed.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.GridFilterFactories.GridFilterFactoryBase.GridFilterCreated">
            <summary>
            Event for notification when a <see cref="T:SAN.UI.DataGridView.IGridFilter"/> has been
            created in order to use it in a specific column and to allow
            custom modifications to it.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.GridFilterFactoryBase.BeginGridFilterCreation">
            <summary>
            Notifies this instance that the <see cref="T:SAN.UI.DataGridView.IGridFilter"/> creation process
            is being started.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.GridFilterFactoryBase.EndGridFilterCreation">
            <summary>
            Notifies this instance that the <see cref="T:SAN.UI.DataGridView.IGridFilter"/> creation process
            has finished. After this call all created <see cref="T:SAN.UI.DataGridView.IGridFilter"/>s should
            be in a usable state.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.GridFilterFactoryBase.CreateGridFilter(System.Windows.Forms.DataGridViewColumn)">
            <summary>
            Creates a <see cref="T:SAN.UI.DataGridView.IGridFilter"/> for the specified arguments.
            It calls <see cref="M:SAN.UI.DataGridView.GridFilterFactories.GridFilterFactoryBase.CreateGridFilterInternal(System.Windows.Forms.DataGridViewColumn)"/> which must be overridden
            by any implementing class and raises the <see cref="E:SAN.UI.DataGridView.GridFilterFactories.GridFilterFactoryBase.GridFilterCreated"/>
            afterwards.
            </summary>
            <param name="column">The <see cref="T:System.Data.DataColumn"/> for which the filter control should be created.</param>
            <returns>A <see cref="T:SAN.UI.DataGridView.IGridFilter"/>.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.GridFilterFactoryBase.ToString">
            <summary>
            Returns a textual representation of the class.
            </summary>
            <returns>A textual representation of the class.</returns>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilterFactories.LayoutedGridFilterFactoryControl">
            <summary>
            Implementation of <see cref="T:SAN.UI.DataGridView.IGridFilterFactory"/> extending another
            <see cref="T:SAN.UI.DataGridView.IGridFilterFactory"/> instance by overriding the default
            placement of the filter controls and placing them in a layouted way
            outside of the grid. 
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.LayoutedGridFilterFactoryControl.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.LayoutedGridFilterFactoryControl.Dispose(System.Boolean)">
            <summary> 
            Die verwendeten Ressourcen bereinigen.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.LayoutedGridFilterFactoryControl.InitializeComponent">
            <summary> 
            Erforderliche Methode für die Designerunterstützung. 
            Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterFactories.LayoutedGridFilterFactoryControl.InnerGridFilterFactory">
            <summary>
            Gets and sets the <see cref="T:SAN.UI.DataGridView.IGridFilterFactory"/> instance which should
            be used for creating <see cref="T:SAN.UI.DataGridView.IGridFilter"/>s.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterFactories.LayoutedGridFilterFactoryControl.ControlsMinimumWidth">
            <summary>
            Gets and sets the minimum width for the controls. If the panel isn't
            big enough scrollbars will be created.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterFactories.LayoutedGridFilterFactoryControl.HorizontalSpacing">
            <summary>
            Gets and sets the horizontal space between the labels and controls.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterFactories.LayoutedGridFilterFactoryControl.VerticalSpacing">
            <summary>
            Gets and sets the vertical space between the rows.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterFactories.LayoutedGridFilterFactoryControl.RightAlignLabels">
            <summary>
            Gets and sets whether the labels are aligned to the right or to the left.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterFactories.LayoutedGridFilterFactoryControl.ShowEmptyGridFilters">
            <summary>
            Gets and sets whether EmptyGridFilter instances should be shown.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.LayoutedGridFilterFactoryControl.HasChanged">
            <summary>
            Notification method to this instance that the filter
            customization logic has changed and that the filters 
            need to be recreated
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.GridFilterFactories.LayoutedGridFilterFactoryControl.Changed">
            <summary>
            Event for notification that the behaviour of this
            instance has changed.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.GridFilterFactories.LayoutedGridFilterFactoryControl.GridFilterCreated">
            <summary>
            Event for notification when a <see cref="T:SAN.UI.DataGridView.IGridFilter"/> has been
            created in order to use it in a specific column and to allow
            custom modifications to it.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.LayoutedGridFilterFactoryControl.BeginGridFilterCreation">
            <summary>
            Notifies this instance that the <see cref="T:SAN.UI.DataGridView.IGridFilter"/> creation process
            is being started.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.LayoutedGridFilterFactoryControl.EndGridFilterCreation">
            <summary>
            Notifies this instance that the <see cref="T:SAN.UI.DataGridView.IGridFilter"/> creation process
            has finished. After this call all created <see cref="T:SAN.UI.DataGridView.IGridFilter"/>s should
            be in a usable state.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.LayoutedGridFilterFactoryControl.CreateGridFilter(System.Windows.Forms.DataGridViewColumn)">
            <summary>
            Creates a new instance of <see cref="T:SAN.UI.DataGridView.IGridFilter"/> by calling the 
            <see cref="P:SAN.UI.DataGridView.GridFilterFactories.LayoutedGridFilterFactoryControl.InnerGridFilterFactory"/> and then modifying the default
            placement.
            </summary>
            <param name="column">The <see cref="T:System.Data.DataColumn"/> for which the filter control should be created.</param>
            <returns>A <see cref="T:SAN.UI.DataGridView.IGridFilter"/>.</returns>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilterFactories.LayoutedPanel">
            <summary>
            A panel which positions <see cref="T:System.Windows.Forms.Control"/>s with their 
            corresponding <see cref="T:System.Windows.Forms.Label"/>s in a layouted way.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.LayoutedPanel.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterFactories.LayoutedPanel.ControlsMinimumWidth">
            <summary>
            Gets and sets the minimum width for the controls. If the panel isn't
            big enough scrollbars will be created.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterFactories.LayoutedPanel.HorizontalSpacing">
            <summary>
            Gets and sets the horizontal space between the labels and controls.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterFactories.LayoutedPanel.VerticalSpacing">
            <summary>
            Gets and sets the vertical space between the rows.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilterFactories.LayoutedPanel.RightAlignLabels">
            <summary>
            Gets and sets whether the labels are aligned to the right or to the left.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.LayoutedPanel.Clear">
            <summary>
            Clear the contents of this instance.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.LayoutedPanel.Fill(System.Windows.Forms.Label[],System.Windows.Forms.Control[])">
            <summary>
            Fills the instance with the given controls in the two arrays.
            Both arrays must have the same size. Otherwise an <see cref="T:System.ArgumentException"/>
            will be thrown.
            </summary>
            <param name="labels">Array with <see cref="T:System.Windows.Forms.Label"/> objects</param>
            <param name="controls">Array with <see cref="T:System.Windows.Forms.Control"/> objects</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.LayoutedPanel.OnResize(System.EventArgs)">
            <summary>
            Repositions the contents after the control has been resized.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilterFactories.NullGridFilterFactory">
            <summary>
            <see cref="T:SAN.UI.DataGridView.IGridFilterFactory"/> implementation which creates a
            <see cref="T:SAN.UI.DataGridView.GridFilters.NullGridFilter"/> on every column.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.NullGridFilterFactory.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilterFactories.NullGridFilterFactory.CreateGridFilterInternal(System.Windows.Forms.DataGridViewColumn)">
            <summary>
            Return always a <see cref="T:SAN.UI.DataGridView.GridFilters.NullGridFilter"/>. 
            </summary>
            <param name="column">The <see cref="T:System.Data.DataColumn"/> for which the filter control should be created.</param>
            <returns>A <see cref="T:SAN.UI.DataGridView.IGridFilter"/>.</returns>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFiltersControl">
            <summary>
            A control where all controls all placed which are necessary for
            extending a grid for filtering.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.GridFiltersControl.AfterFiltersChanged">
            <summary>
            Event, which gets fired whenever the filter criteria has been changed.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.GridFiltersControl.BeforeFiltersChanging">
            <summary>
            Event, which gets fired whenever the filter criteria are going to be changed.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.GridFiltersControl.GridFilterBound">
            <summary>
            Event, which gets fired whenever an <see cref="T:SAN.UI.DataGridView.IGridFilter"/> has been bound
            and thus added to this instance.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.GridFiltersControl.GridFilterUnbound">
            <summary>
            Event, which gets fired whenever an <see cref="T:SAN.UI.DataGridView.IGridFilter"/> has been unbound
            and thus removed to this instance.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFiltersControl.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFiltersControl.InitializeComponent">
            <summary> 
            Erforderliche Methode f|r die Designerunterst|tzung. 
            Der Inhalt der Methode darf nicht mit dem Code-Editor gedndert werden.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFiltersControl.Dispose(System.Boolean)">
            <summary> 
            Die verwendeten Ressourcen bereinigen.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFiltersControl.OnResize(System.EventArgs)">
            <summary>
            Initiates recalculation for the positions of the filter GUI elements.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFiltersControl.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            Initiates recalculation for the positions of the filter GUI elements.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFiltersControl.DataGridView">
            <summary>
            Gets and sets the <see cref="P:SAN.UI.DataGridView.GridFiltersControl.DataGridView"/> instance to use.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFiltersControl.KeepFilters">
            <summary>
            Gets and sets whether filters are kept while switching between different tables.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFiltersControl.AutoRefreshMode">
            <summary>
            Gets and sets whether the filter criteria is automatically refreshed when
            changes are made to the filter controls. If set to false then a call to
            <see cref="M:SAN.UI.DataGridView.GridFiltersControl.RefreshFilters"/> is needed to manually refresh the criteria.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFiltersControl.FilterText">
            <summary>
            Gets and sets the text for the filter label.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFiltersControl.FilterFactory">
            <summary>
            Gets and sets the <see cref="T:SAN.UI.DataGridView.IGridFilterFactory"/> used to generate the filter GUI.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFiltersControl.Operator">
            <summary>
            The selected operator to combine the filter criterias.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFiltersControl.FilterTextVisible">
            <summary>
            Gets and sets whether the filter label should be visible.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFiltersControl.MessageErrorMode">
            <summary>
            Gets and sets what information is showed to the user
            if an error in the builded filter criterias occurs.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFiltersControl.ConsoleErrorMode">
            <summary>
            Gets and sets what information is showed to the user
            if an error in the builded filter criterias occurs.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFiltersControl.BaseFilters">
            <summary>
            Gets a modifyable collection which maps <see cref="P:System.Data.DataTable.TableName"/>s
            to base filter strings which are applied in front of the automatically
            created filter.
            </summary>
            <remarks>
            The grid contents is not automatically refreshed when modifying this 
            collection. A call to <see cref="M:SAN.UI.DataGridView.GridFiltersControl.RefreshFilters"/> is needed for this.
            </remarks>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFiltersControl.BaseFilterOperator">
            <summary>
            Gets or sets which operator should be used to combine the base filter
            with the automatically created filters.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFiltersControl.BaseFilterEnabled">
            <summary>
            Gets or sets whether base filters should be used when refreshing
            the filter criteria. Setting it to false will disable the functionality
            while still keeping the base filter strings in the <see cref="P:SAN.UI.DataGridView.GridFiltersControl.BaseFilters"/>
            collection intact.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFiltersControl.CurrentTableBaseFilter">
            <summary>
            Gets or sets the currently used base filter. Internally it adjusts the
            <see cref="P:SAN.UI.DataGridView.GridFiltersControl.BaseFilters"/> collection with the given value and the current
            <see cref="P:System.Data.DataTable.TableName"/> and also initiates a refresh.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFiltersControl.ClearFilters">
            <summary>
            Clears all filters to initial state.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFiltersControl.SetFilters(System.String[])">
            <summary>
            Sets all filters to the specified values.
            The values must be in order of the column styles in the current view.
            This function should normally be used with data previously coming
            from the <see cref="M:SAN.UI.DataGridView.GridFiltersControl.GetFilters"/> function.
            </summary>
            <param name="filters">filters to set</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFiltersControl.GetFilters">
            <summary>
            Gets all filters currently set
            </summary>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFiltersControl.RefreshFilters">
            <summary>
            Refreshes the filter criteria to match the current contents of the associated
            filter controls.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFiltersControl.GetGridFilters">
            <summary>
            Gets all currently set <see cref="T:SAN.UI.DataGridView.IGridFilter"/>s.
            </summary>
            <returns>Collection of <see cref="T:SAN.UI.DataGridView.IGridFilter"/>s.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFiltersControl.GetViewFromDataSource(System.Object,System.String)">
            <summary>
            Tries to resolve a <see cref="T:System.ComponentModel.IBindingListView"/> from a given data source.
            </summary>
            <param name="dataSource"></param>
            <param name="dataMember"></param>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFiltersControl.RecreateGridFilters">
            <summary>
            Initiates a recalculation of the needed filter GUI elements and their positions.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFiltersControl.OnBeforeFiltersChanging(System.EventArgs)">
            <summary>
            Raises the <see cref="E:SAN.UI.DataGridView.GridFiltersControl.BeforeFiltersChanging"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFiltersControl.OnAfterFiltersChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:SAN.UI.DataGridView.GridFiltersControl.AfterFiltersChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFiltersControl.OnGridFilterBound(SAN.UI.DataGridView.GridFilterEventArgs)">
            <summary>
            Raises the <see cref="E:SAN.UI.DataGridView.GridFiltersControl.GridFilterBound"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFiltersControl.OnGridFilterUnbound(SAN.UI.DataGridView.GridFilterEventArgs)">
            <summary>
            Raises the <see cref="E:SAN.UI.DataGridView.GridFiltersControl.GridFilterUnbound"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilters.BoolGridFilter">
            <summary>
            A <see cref="T:SAN.UI.DataGridView.IGridFilter"/> implementation for filtering boolean columns
            with a <see cref="T:System.Windows.Forms.CheckBox"/> to control the filter.
            It allows three states: 
            In intermediate state no filter will be set.
            In checked state the filter will show only true values.
            In unchecked state the filter will only show false values.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.BoolGridFilter.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.BoolGridFilter.#ctor(System.Windows.Forms.CheckBox)">
            <summary>
            Creates a new instance with <see cref="P:SAN.UI.DataGridView.GridFilters.GridFilterBase.UseCustomFilterPlacement"/>
            set to true.
            </summary>
            <param name="checkBox">A <see cref="T:System.Windows.Forms.CheckBox"/> instance which
            should be used by the filter.</param>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.BoolGridFilter.CheckState">
            <summary>
            Gets or sets the current state of the contained <see cref="T:System.Windows.Forms.CheckBox"/>.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.BoolGridFilter.FilterControl">
            <summary>
            The <see cref="T:System.Windows.Forms.CheckBox"/> for the GUI.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.BoolGridFilter.HasFilter">
            <summary>
            Gets whether a filter is set.
            True, if the <see cref="T:System.Windows.Forms.CheckBox"/> is not intermediate.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.BoolGridFilter.GetFilter(System.String)">
            <summary>
            Gets a simple boolean filter criteria in string representation
            </summary>
            <param name="columnName">
            The name of the column for which the criteria should be generated.
            </param>
            <returns>a string representing the current filter criteria</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.BoolGridFilter.SetFilter(System.String)">
            <summary>
            Sets a string which a a previous result of <see cref="M:SAN.UI.DataGridView.GridFilters.BoolGridFilter.GetFilter(System.String)"/>
            in order to configure the <see cref="P:SAN.UI.DataGridView.GridFilters.BoolGridFilter.FilterControl"/> to match the
            given filter criteria.
            </summary>
            <param name="filter">filter criteria</param>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.BoolGridFilter.Clear">
            <summary>
            Clears the filter to its initial state.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.BoolGridFilter.Dispose">
            <summary>
            Cleans up
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilters.DateGridFilter">
            <summary>
            A <see cref="T:SAN.UI.DataGridView.IGridFilter"/> implementation for filtering date columns
            with a <see cref="T:SAN.UI.DataGridView.GridFilters.DateGridFilterControl"/> to control the filter.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DateGridFilter.#ctor">
            <summary>
            Creates a new instance with <see cref="P:SAN.UI.DataGridView.GridFilters.GridFilterBase.UseCustomFilterPlacement"/>
            and <see cref="P:SAN.UI.DataGridView.GridFilters.DateGridFilter.ShowInBetweenOperator"/> set to false.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DateGridFilter.#ctor(System.Boolean)">
            <summary>
            Creates a new instance with <see cref="P:SAN.UI.DataGridView.GridFilters.GridFilterBase.UseCustomFilterPlacement"/>
            set to false.
            </summary>
            <param name="showInBetweenOperator">Determines whether the 'in between' operator is available.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DateGridFilter.#ctor(SAN.UI.DataGridView.GridFilters.DateGridFilterControl)">
            <summary>
            Creates a new instance with <see cref="P:SAN.UI.DataGridView.GridFilters.GridFilterBase.UseCustomFilterPlacement"/>
            set to true and not having the 'in between' operator.
            </summary>
            <param name="dateGridFilterControl">A <see cref="T:SAN.UI.DataGridView.GridFilters.DateGridFilterControl"/> 
            instance which should be used by the filter.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DateGridFilter.#ctor(SAN.UI.DataGridView.GridFilters.DateGridFilterControl,System.Boolean)">
            <summary>
            Creates a new instance with <see cref="P:SAN.UI.DataGridView.GridFilters.GridFilterBase.UseCustomFilterPlacement"/>
            set to true.
            </summary>
            <param name="dateGridFilterControl">A <see cref="T:SAN.UI.DataGridView.GridFilters.DateGridFilterControl"/> 
            instance which should be used by the filter.</param>
            <param name="showInBetweenOperator">Determines whether the 'in between' operator is available.</param>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.DateGridFilter.ShowInBetweenOperator">
            <summary>
            Sets or gets whether the 'in between' operator should be available.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.DateGridFilter.Date1">
            <summary>
            Gets or sets the current date of the first contained <see cref="T:System.Windows.Forms.DateTimePicker"/>.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.DateGridFilter.Date2">
            <summary>
            Gets or sets the current date of the second contained <see cref="T:System.Windows.Forms.DateTimePicker"/>.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.DateGridFilter.Operator">
            <summary>
            Gets or sets the current operator of the contained <see cref="T:System.Windows.Forms.ComboBox"/>.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.DateGridFilter.FilterControl">
            <summary>
            Returns the instance itsself, which contains a <see cref="T:System.Windows.Forms.DateTimePicker"/>
            and a <see cref="T:System.Windows.Forms.ComboBox"/> to adjust the filter.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.DateGridFilter.HasFilter">
            <summary>
            Gets whether a filter is set.
            True, if the <see cref="T:System.Windows.Forms.ComboBox"/> is not empty.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DateGridFilter.GetFilter(System.String)">
            <summary>
            Gets a filter with the current criteria in string representation.
            </summary>
            <param name="columnName">
            The name of the column for which the criteria should be generated.
            </param>
            <returns>A string representing the current filter criteria</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DateGridFilter.SetFilter(System.String)">
            <summary>
            Sets a string which a a previous result of <see cref="M:SAN.UI.DataGridView.GridFilters.DateGridFilter.GetFilter(System.String)"/>
            in order to configure the <see cref="P:SAN.UI.DataGridView.GridFilters.DateGridFilter.FilterControl"/> to match the
            given filter criteria.
            </summary>
            <param name="filter">filter criteria</param>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DateGridFilter.Clear">
            <summary>
            Clears the filter to its initial state.
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilters.DateGridFilterControl">
            <summary>
            A control with a <see cref="P:SAN.UI.DataGridView.GridFilters.DateGridFilterControl.ComboBox"/> and two <see cref="T:System.Windows.Forms.DateTimePicker"/>s
            needed in the <see cref="T:SAN.UI.DataGridView.GridFilters.DateGridFilter"/>.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.GridFilters.DateGridFilterControl.Changed">
            <summary>
            Event firing when either the <see cref="P:SAN.UI.DataGridView.GridFilters.DateGridFilterControl.ComboBox"/> or
            the <see cref="T:System.Windows.Forms.DateTimePicker"/> has changed.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DateGridFilterControl.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DateGridFilterControl.Dispose(System.Boolean)">
            <summary> 
            Cleans up.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DateGridFilterControl.OnResize(System.EventArgs)">
            <summary>
            Resizes the contained <see cref="T:System.Windows.Forms.DateTimePicker"/>s so that they
            have the same width.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DateGridFilterControl.InitializeComponent">
            <summary> 
            Erforderliche Methode für die Designerunterstützung. 
            Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.DateGridFilterControl.DateTimePicker1">
            <summary>
            Gets the first contained <see cref="T:System.Windows.Forms.DateTimePicker"/> instance.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.DateGridFilterControl.DateTimePicker2">
            <summary>
            Gets the second contained <see cref="T:System.Windows.Forms.DateTimePicker"/> instance.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.DateGridFilterControl.ComboBox">
            <summary>
            Gets the contained <see cref="P:SAN.UI.DataGridView.GridFilters.DateGridFilterControl.ComboBox"/> instance.
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter">
            <summary>
            A <see cref="T:SAN.UI.DataGridView.IGridFilter"/> implementation for columns with a <see cref="T:System.Windows.Forms.ComboBox"/>
            containing all values found within the column.
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.SpecialValue">
            <summary>
            Defines special values which can be contained in the <see cref="T:System.Windows.Forms.ComboBox"/>
            of a <see cref="T:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter"/>.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.SpecialValue.NoFilter">
            <summary>
            The special value meaning 'No filtering'.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.SpecialValue.NullFilter">
            <summary>
            The special value meaning 'Filter null values'.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.SpecialValue.ToString">
            <summary>
            Gets a textual representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.#ctor(System.Windows.Forms.DataGridViewColumn)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="column">Column where the values list should be generated from.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.#ctor(System.Windows.Forms.DataGridViewColumn,System.Windows.Forms.ComboBox)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="column">Column where the values list should be generated from.</param>
            <param name="comboBox">Control which should be used to display the values.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.#ctor(System.String[],System.Boolean)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="values">The list of values to be displayed.</param>
            <param name="containsDbNull">Indicates whether the (null) entry should be displayed or not.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.#ctor(System.String[],System.Boolean,System.Windows.Forms.ComboBox)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="values">The list of values to be displayed.</param>
            <param name="containsDbNull">Indicates whether the (null) entry should be displayed or not.</param>
            <param name="comboBox">Control which should be used to display the values.</param>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.Values">
            <summary>
            Gets all values contained in the <see cref="T:System.Windows.Forms.ComboBox"/>.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.CurrentValue">
            <summary>
            Gets or sets the current value of the contained <see cref="T:System.Windows.Forms.ComboBox"/>.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.FilterControl">
            <summary>
            The <see cref="T:System.Windows.Forms.ComboBox"/> for the GUI.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.HasFilter">
            <summary>
            Gets whether a filter is set.
            True, if the text of the <see cref="T:System.Windows.Forms.ComboBox"/> is not empty.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.GetFilter(System.String)">
            <summary>
            Gets a filter with a criteria in string representation.
            </summary>
            <param name="columnName">
            The name of the column for which the criteria should be generated.
            </param>
            <returns>a string representing the current filter criteria</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.SetFilter(System.String)">
            <summary>
            Sets a string which a a previous result of <see cref="M:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.GetFilter(System.String)"/>
            in order to configure the <see cref="P:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.FilterControl"/> to match the
            given filter criteria.
            </summary>
            <param name="filter">filter criteria</param>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.Clear">
            <summary>
            Clears the filter to its initial state.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.GetDistinctValues(System.Windows.Forms.DataGridViewColumn,System.Boolean@)">
            <summary>
            Gets all values found in the specified columns as a string array.
            </summary>
            <param name="column">Column to search for values.</param>
            <param name="containsDbNull">Indicates whether the (null) entry is contained in the column or not.</param>
            <returns>Array with different values.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.GetDistinctValues(System.Windows.Forms.DataGridViewColumn,System.Int32,System.Boolean@)">
            <summary>
            Gets all values found in the specified columns as a string array
            limited in size to the value specified. If this value is exceeded
            than null will be returned instead.
            </summary>
            <param name="column">Column to search for values.</param>
            <param name="maximumValues">Value indicating how many different values should be fetched at maximum.</param>
            <param name="containsDbNull">Indicates whether the (null) entry is contained in the column or not.</param>
            <returns>Array with different values, or Null.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.DistinctValuesGridFilter.Dispose">
            <summary>
            Cleans up
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilters.EmptyGridFilter">
            <summary>
            A dummy <see cref="T:SAN.UI.DataGridView.IGridFilter"/> implementation, which does no filtering.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EmptyGridFilter.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.EmptyGridFilter.FilterControl">
            <summary>
            Gets an empty control.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.EmptyGridFilter.HasFilter">
            <summary>
            Always return false.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EmptyGridFilter.GetFilter(System.String)">
            <summary>
            Always returns an empty string.
            </summary>
            <param name="columnName">Not necessary.</param>
            <returns>An empty string.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EmptyGridFilter.SetFilter(System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="filter">filter criteria</param>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EmptyGridFilter.Clear">
            <summary>
            Clears the filter to its initial state.
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilters.EnumerationGridFilter">
            <summary>
            A <see cref="T:SAN.UI.DataGridView.IGridFilter"/> implementation for filtering any columns
            with enmuration types. A <see cref="T:System.Windows.Forms.ComboBox"/> will show all
            possible enumeration values from which the user can select one.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EnumerationGridFilter.#ctor(SAN.UI.DataGridView.GridFilters.EnumerationSources.IEnumerationSource)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="enumerationSource">Source defining what values should
            be displayed and how they are filtered.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EnumerationGridFilter.#ctor(SAN.UI.DataGridView.GridFilters.EnumerationSources.IEnumerationSource,System.Windows.Forms.ComboBox)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="enumerationSource">Source defining what values should
            be displayed and how they are filtered.</param>
            <param name="comboBox">Control which should be used to display the enumeration values.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EnumerationGridFilter.#ctor(System.Type)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="dataType"><see cref="T:System.Type"/> of the enumeration which values
            should be displayed</param>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.EnumerationGridFilter.Value">
            <summary>
            Gets or sets the current value of the contained <see cref="T:System.Windows.Forms.ComboBox"/>.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.EnumerationGridFilter.FilterControl">
            <summary>
            The <see cref="T:System.Windows.Forms.ComboBox"/> for the GUI.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.EnumerationGridFilter.HasFilter">
            <summary>
            Gets whether a filter is set.
            True, if the text of the <see cref="T:System.Windows.Forms.ComboBox"/> is not empty.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EnumerationGridFilter.GetFilter(System.String)">
            <summary>
            Gets a filter with a criteria in string representation.
            </summary>
            <param name="columnName">
            The name of the column for which the criteria should be generated.
            </param>
            <returns>a string representing the current filter criteria</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EnumerationGridFilter.SetFilter(System.String)">
            <summary>
            Sets a string which a a previous result of <see cref="M:SAN.UI.DataGridView.GridFilters.EnumerationGridFilter.GetFilter(System.String)"/>
            in order to configure the <see cref="P:SAN.UI.DataGridView.GridFilters.EnumerationGridFilter.FilterControl"/> to match the
            given filter criteria.
            </summary>
            <param name="filter">filter criteria</param>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EnumerationGridFilter.Clear">
            <summary>
            Clears the filter to its initial state.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EnumerationGridFilter.Dispose">
            <summary>
            Cleans up
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilters.EnumerationSources.IEnumerationSource">
            <summary>
            Interface defining a data source for the <see cref="T:SAN.UI.DataGridView.GridFilters.EnumerationGridFilter"/>.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.EnumerationSources.IEnumerationSource.AllValues">
            <summary>
            Gets all values which should be displayed.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EnumerationSources.IEnumerationSource.GetFilterFromValue(System.Object)">
            <summary>
            Build the filter criteria from the given input.
            </summary>
            <param name="value">The selected value for which the criteria is created.</param>
            <returns>A <see cref="T:System.String"/> representing the criteria.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EnumerationSources.IEnumerationSource.GetValueFromFilter(System.String)">
            <summary>
            Gets the object value for a specified filter.
            </summary>
            <param name="filter">The filter value to be searched</param>
            <returns>object value for the specified filter</returns>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilters.EnumerationSources.IntStringMapEnumerationSource">
            <summary>
            <see cref="T:SAN.UI.DataGridView.GridFilters.EnumerationSources.IEnumerationSource"/> implementation which supports userdefined
            matching between <see cref="T:System.Int32"/> values in the datasource and <see cref="T:System.String"/>
            values which should be displayed in the filter.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EnumerationSources.IntStringMapEnumerationSource.#ctor">
            <summary>
            Creates a new instance with no mapping.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EnumerationSources.IntStringMapEnumerationSource.#ctor(System.Int32[],System.String[])">
            <summary>
            Creates a new instance mapping the given <see cref="T:System.Int32"/> values to
            the given <see cref="T:System.String"/> values.
            </summary>
            <param name="integerValues"></param>
            <param name="stringValues"></param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EnumerationSources.IntStringMapEnumerationSource.AddMapping(System.Int32,System.String)">
            <summary>
            Adds a mapping
            </summary>
            <param name="integerValue"></param>
            <param name="stringValue"></param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EnumerationSources.IntStringMapEnumerationSource.RemoveMapping(System.String)">
            <summary>
            Removes a mapping
            </summary>
            <param name="stringValue"></param>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.EnumerationSources.IntStringMapEnumerationSource.AllValues">
            <summary>
            Gets all values which should be displayed.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EnumerationSources.IntStringMapEnumerationSource.GetFilterFromValue(System.Object)">
            <summary>
            Build the filter criteria from the given input.
            </summary>
            <param name="value">The selected value for which the criteria is created.</param>
            <returns>A <see cref="T:System.String"/> representing the criteria.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EnumerationSources.IntStringMapEnumerationSource.GetValueFromFilter(System.String)">
            <summary>
            Gets the object value for a specified filter.
            </summary>
            <param name="filter">The filter value to be searched</param>
            <returns>object value for the specified filter</returns>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilters.EnumerationSources.TypeEnumerationSource">
            <summary>
            <see cref="T:SAN.UI.DataGridView.GridFilters.EnumerationSources.IEnumerationSource"/> implementation which gets its values from
            an enumeration type via reflection.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EnumerationSources.TypeEnumerationSource.#ctor(System.Type)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="dataType">Enumeration type</param>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.EnumerationSources.TypeEnumerationSource.AllValues">
            <summary>
            Gets all values which should be displayed.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EnumerationSources.TypeEnumerationSource.GetFilterFromValue(System.Object)">
            <summary>
            Build the filter criteria from the given input.
            </summary>
            <param name="value">The selected value for which the criteria is created.</param>
            <returns>A <see cref="T:System.String"/> representing the criteria.</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.EnumerationSources.TypeEnumerationSource.GetValueFromFilter(System.String)">
            <summary>
            Gets the object value for a specified filter.
            </summary>
            <param name="filter">The filter value to be searched</param>
            <returns>object value for the specified filter</returns>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilters.GridFilterBase">
            <summary>
            Base class for easier <see cref="T:SAN.UI.DataGridView.IGridFilter"/> implementation.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.GridFilterBase.#ctor(System.Boolean)">
            <summary>
            Base constructor.
            </summary>
            <param name="useCustomFilterPlacement">False, if the filter control should be
            placed within the grid, otherwise true.</param>
        </member>
        <member name="E:SAN.UI.DataGridView.GridFilters.GridFilterBase.Changed">
            <summary>
            Event for notification that the filter criteria for this
            instance has changed.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.GridFilterBase.FilterControl">
            <summary>
            The control which contains the GUI elements for the filter
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.GridFilterBase.UseCustomFilterPlacement">
            <summary>
            Specifies whether the control is placed automatically or not.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.GridFilterBase.HasFilter">
            <summary>
            Gets whether a filter is currently set
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.GridFilterBase.GetFilter(System.String)">
            <summary>
            Gets a string representing the current filter.
            This must be a valid expression understandable by the 
            <see cref="T:System.Data.DataView"/> class's property <see cref="P:System.Data.DataView.RowFilter"/>.
            </summary>
            <param name="columnName">
            The name of the column for which the criteria should be generated.
            </param>
            <returns>a string representing the current filter criteria</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.GridFilterBase.SetFilter(System.String)">
            <summary>
            Sets a string which a a previous result of <see cref="M:SAN.UI.DataGridView.GridFilters.GridFilterBase.GetFilter(System.String)"/>
            in order to configure the <see cref="P:SAN.UI.DataGridView.GridFilters.GridFilterBase.FilterControl"/> to match the
            given filter criteria.
            </summary>
            <param name="filter">filter criteria</param>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.GridFilterBase.Clear">
            <summary>
            Clears the filter to its initial state.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.GridFilterBase.OnChanged">
            <summary>
            Fires the <see cref="E:SAN.UI.DataGridView.GridFilters.GridFilterBase.Changed"/> event.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.GridFilterBase.Dispose">
            <summary>
            Frees the resources of this instance.
            Not needed in the base implementation but probably a good thing
            in deriving classes.
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilters.NullGridFilter">
            <summary>
            A <see cref="T:SAN.UI.DataGridView.IGridFilter"/> implementation for filtering columns
            with a <see cref="T:System.Windows.Forms.CheckBox"/> to control the filter.
            It allows three states: 
            In intermediate state no filter will be set.
            In checked state the filter will show only values which are not null.
            In unchecked state the filter will only show values which are null.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.NullGridFilter.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.NullGridFilter.#ctor(System.Windows.Forms.CheckBox)">
            <summary>
            Creates a new instance with <see cref="P:SAN.UI.DataGridView.GridFilters.GridFilterBase.UseCustomFilterPlacement"/>
            set to true.
            </summary>
            <param name="checkBox">A <see cref="T:System.Windows.Forms.CheckBox"/> instance which
            should be used by the filter.</param>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.NullGridFilter.CheckState">
            <summary>
            Gets or sets the current state of the contained <see cref="T:System.Windows.Forms.CheckBox"/>.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.NullGridFilter.FilterControl">
            <summary>
            The <see cref="T:System.Windows.Forms.CheckBox"/> for the GUI.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.NullGridFilter.HasFilter">
            <summary>
            Gets whether a filter is set.
            True, if the <see cref="T:System.Windows.Forms.CheckBox"/> is not intermediate.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.NullGridFilter.GetFilter(System.String)">
            <summary>
            Gets a simple boolean filter criteria in string representation
            </summary>
            <param name="columnName">
            The name of the column for which the criteria should be generated.
            </param>
            <returns>a string representing the current filter criteria</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.NullGridFilter.SetFilter(System.String)">
            <summary>
            Sets a string which a a previous result of <see cref="M:SAN.UI.DataGridView.GridFilters.NullGridFilter.GetFilter(System.String)"/>
            in order to configure the <see cref="P:SAN.UI.DataGridView.GridFilters.NullGridFilter.FilterControl"/> to match the
            given filter criteria.
            </summary>
            <param name="filter">filter criteria</param>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.NullGridFilter.Clear">
            <summary>
            Clears the filter to its initial state.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.NullGridFilter.Dispose">
            <summary>
            Cleans up
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilters.NumericGridFilter">
            <summary>
            A <see cref="T:SAN.UI.DataGridView.IGridFilter"/> implementation for filtering numeric columns
            with a <see cref="T:SAN.UI.DataGridView.GridFilters.NumericGridFilterControl"/> to control the filter.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.NumericGridFilter.#ctor">
            <summary>
            Creates a new instance with <see cref="P:SAN.UI.DataGridView.GridFilters.GridFilterBase.UseCustomFilterPlacement"/>
            and <see cref="P:SAN.UI.DataGridView.GridFilters.NumericGridFilter.ShowInBetweenOperator"/> set to false.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.NumericGridFilter.#ctor(System.Boolean)">
            <summary>
            Creates a new instance with <see cref="P:SAN.UI.DataGridView.GridFilters.GridFilterBase.UseCustomFilterPlacement"/>
            set to false.
            </summary>
            <param name="showInBetweenOperator">Determines whether the 'in between' operator is available.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.NumericGridFilter.#ctor(SAN.UI.DataGridView.GridFilters.NumericGridFilterControl)">
            <summary>
            Creates a new instance with <see cref="P:SAN.UI.DataGridView.GridFilters.GridFilterBase.UseCustomFilterPlacement"/>
            set to true and not having the 'in between' operator.
            </summary>
            <param name="numericGridFilterControl">A <see cref="T:SAN.UI.DataGridView.GridFilters.NumericGridFilterControl"/> 
            instance which should be used by the filter.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.NumericGridFilter.#ctor(SAN.UI.DataGridView.GridFilters.NumericGridFilterControl,System.Boolean)">
            <summary>
            Creates a new instance with <see cref="P:SAN.UI.DataGridView.GridFilters.GridFilterBase.UseCustomFilterPlacement"/>
            set to true and not having the 'in between' operator.
            </summary>
            <param name="numericGridFilterControl">A <see cref="T:SAN.UI.DataGridView.GridFilters.NumericGridFilterControl"/> 
            instance which should be used by the filter.</param>
            <param name="showInBetweenOperator">Determines whether the 'in between' operator is available.</param>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.NumericGridFilter.ShowInBetweenOperator">
            <summary>
            Sets or gets whether the 'in between' operator should be available.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.NumericGridFilter.Text1">
            <summary>
            Gets or sets the current text of the first contained <see cref="T:System.Windows.Forms.TextBox"/>.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.NumericGridFilter.Text2">
            <summary>
            Gets or sets the current text of the second contained <see cref="T:System.Windows.Forms.TextBox"/>.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.NumericGridFilter.Operator">
            <summary>
            Gets or sets the current operator of the contained <see cref="T:System.Windows.Forms.ComboBox"/>.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.NumericGridFilter.FilterControl">
            <summary>
            Returns the instance itsself, which contains a <see cref="T:System.Windows.Forms.TextBox"/>
            and a <see cref="T:System.Windows.Forms.ComboBox"/> to adjust the filter.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.NumericGridFilter.HasFilter">
            <summary>
            Gets whether a filter is set.
            True, if the text of the <see cref="T:System.Windows.Forms.TextBox"/> is not empty.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.NumericGridFilter.GetFilter(System.String)">
            <summary>
            Gets a filter with the current criteria in string representation.
            If operator '*' is set in the <see cref="T:System.Windows.Forms.ComboBox"/> a text criteria
            with like will be created.
            All other operators will do numerical comparisons. If no valid number
            is entered then all rows will be filtered out.
            </summary>
            <param name="columnName">
            The name of the column for which the criteria should be generated.
            </param>
            <returns>A string representing the current filter criteria</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.NumericGridFilter.SetFilter(System.String)">
            <summary>
            Sets a string which a a previous result of <see cref="M:SAN.UI.DataGridView.GridFilters.NumericGridFilter.GetFilter(System.String)"/>
            in order to configure the <see cref="P:SAN.UI.DataGridView.GridFilters.NumericGridFilter.FilterControl"/> to match the
            given filter criteria.
            </summary>
            <param name="filter">filter criteria</param>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.NumericGridFilter.Clear">
            <summary>
            Clears the filter to its initial state.
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilters.NumericGridFilterControl">
            <summary>
            A control with a <see cref="P:SAN.UI.DataGridView.GridFilters.NumericGridFilterControl.ComboBox"/> and two <see cref="T:System.Windows.Forms.TextBox"/>es
            needed in the <see cref="T:SAN.UI.DataGridView.GridFilters.NumericGridFilter"/>.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.GridFilters.NumericGridFilterControl.Changed">
            <summary>
            Event firing when either the <see cref="P:SAN.UI.DataGridView.GridFilters.NumericGridFilterControl.ComboBox"/> or
            the <see cref="T:System.Windows.Forms.TextBox"/> has changed.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.NumericGridFilterControl.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.NumericGridFilterControl.Dispose(System.Boolean)">
            <summary> 
            Cleans up.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.NumericGridFilterControl.OnResize(System.EventArgs)">
            <summary>
            Resizes the contained <see cref="T:System.Windows.Forms.DateTimePicker"/>s so that they
            have the same width.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.NumericGridFilterControl.InitializeComponent">
            <summary> 
            Erforderliche Methode für die Designerunterstützung. 
            Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.NumericGridFilterControl.TextBox1">
            <summary>
            Gets the first contained <see cref="T:System.Windows.Forms.TextBox"/> instance.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.NumericGridFilterControl.TextBox2">
            <summary>
            Gets the second contained <see cref="T:System.Windows.Forms.TextBox"/> instance.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.NumericGridFilterControl.ComboBox">
            <summary>
            Gets the contained <see cref="P:SAN.UI.DataGridView.GridFilters.NumericGridFilterControl.ComboBox"/> instance.
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.GridFilters.TextGridFilter">
            <summary>
            A <see cref="T:SAN.UI.DataGridView.IGridFilter"/> implementation for filtering any columns
            with a <see cref="T:System.Windows.Forms.TextBox"/> to control the filter.
            All rows not beginning with the specified text are filtered out.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.TextGridFilter.#ctor(System.Windows.Forms.TextBox)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.TextGridFilter.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.TextGridFilter.Text">
            <summary>
            Gets or sets the current text of the contained <see cref="T:System.Windows.Forms.TextBox"/>.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.TextGridFilter.FilterControl">
            <summary>
            The <see cref="T:System.Windows.Forms.TextBox"/> for the GUI.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.GridFilters.TextGridFilter.HasFilter">
            <summary>
            Gets whether a filter is set.
            True, if the text of the <see cref="T:System.Windows.Forms.CheckBox"/> is not empty.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.TextGridFilter.GetFilter(System.String)">
            <summary>
            Gets a filter with a like criteria in string representation
            </summary>
            <param name="columnName">
            The name of the column for which the criteria should be generated.
            </param>
            <returns>a string representing the current filter criteria</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.TextGridFilter.SetFilter(System.String)">
            <summary>
            Sets a string which a a previous result of <see cref="M:SAN.UI.DataGridView.GridFilters.TextGridFilter.GetFilter(System.String)"/>
            in order to configure the <see cref="P:SAN.UI.DataGridView.GridFilters.TextGridFilter.FilterControl"/> to match the
            given filter criteria.
            </summary>
            <param name="filter">filter criteria</param>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.TextGridFilter.Clear">
            <summary>
            Clears the filter to its initial state.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.GridFilters.TextGridFilter.Dispose">
            <summary>
            Cleans up
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.IGridFilter">
            <summary>
            Interface which is used to provide different filter methods 
            and GUI elements for filtering in the <see cref="T:SAN.UI.DataGridView.DataGridViewEx"/>.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.IGridFilter.Changed">
            <summary>
            Event for notification that the filter criteria for this
            instance has changed.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.IGridFilter.FilterControl">
            <summary>
            The control which contains the GUI elements for the filter
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.IGridFilter.HasFilter">
            <summary>
            Gets whether a filter is currently set
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.IGridFilter.UseCustomFilterPlacement">
            <summary>
            Specifies whether the control is placed automatically or not.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.IGridFilter.GetFilter(System.String)">
            <summary>
            Gets a string representing the current filter.
            This must be a valid expression understandable by the 
            <see cref="T:System.Data.DataView"/> class's property <see cref="P:System.Data.DataView.RowFilter"/>.
            </summary>
            <param name="columnName">
            The name of the column for which the criteria should be generated.
            </param>
            <returns>a string representing the current filter criteria</returns>
        </member>
        <member name="M:SAN.UI.DataGridView.IGridFilter.SetFilter(System.String)">
            <summary>
            Sets a string which a a previous result of <see cref="M:SAN.UI.DataGridView.IGridFilter.GetFilter(System.String)"/>
            in order to configure the <see cref="P:SAN.UI.DataGridView.IGridFilter.FilterControl"/> to match the
            given filter criteria.
            </summary>
            <param name="filter">filter criteria</param>
            <returns></returns>
        </member>
        <member name="M:SAN.UI.DataGridView.IGridFilter.Clear">
            <summary>
            Clears the filter to its initial state.
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.IGridFilterFactory">
            <summary>
            Implemenations of this interface can provide the 
            <see cref="T:SAN.UI.DataGridView.DataGridViewEx"/> with specific implementations
            of <see cref="T:SAN.UI.DataGridView.IGridFilter"/> to adjust special needs for filtering.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.IGridFilterFactory.Changed">
            <summary>
            Event for notification that the behaviour of this
            instance has changed.
            </summary>
        </member>
        <member name="E:SAN.UI.DataGridView.IGridFilterFactory.GridFilterCreated">
            <summary>
            Event for notification when a <see cref="T:SAN.UI.DataGridView.IGridFilter"/> has been
            created in order to use it in a specific column and to allow
            custom modifications to it.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.IGridFilterFactory.BeginGridFilterCreation">
            <summary>
            Notifies this instance that the <see cref="T:SAN.UI.DataGridView.IGridFilter"/> creation process
            is being started.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.IGridFilterFactory.EndGridFilterCreation">
            <summary>
            Notifies this instance that the <see cref="T:SAN.UI.DataGridView.IGridFilter"/> creation process
            has finished. After this call all created <see cref="T:SAN.UI.DataGridView.IGridFilter"/>s should
            be in a usable state.
            </summary>
        </member>
        <member name="M:SAN.UI.DataGridView.IGridFilterFactory.CreateGridFilter(System.Windows.Forms.DataGridViewColumn)">
            <summary>
            When implemented should return a valid <see cref="T:SAN.UI.DataGridView.IGridFilter"/>
            for the specified arguments. 
            </summary>
            <param name="column">The <see cref="T:System.Data.DataColumn"/> for which the filter control should be created.</param>
            <returns>A <see cref="T:SAN.UI.DataGridView.IGridFilter"/>.</returns>
        </member>
        <member name="T:SAN.UI.DataGridView.LogicalOperators">
            <summary>
            Logical operators which can be used to determine how the filter
            criterias are combined
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.LogicalOperators.And">
            <summary>
            Logical And
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.LogicalOperators.Or">
            <summary>
            Logical Or
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.Properties.Resources">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.Properties.Resources.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:SAN.UI.DataGridView.Properties.Resources.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="T:SAN.UI.DataGridView.RefreshMode">
            <summary>
            Modes which determine when the filter criteria get automatically
            applied to the contents of the grid.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.RefreshMode.OnInput">
            <summary>
            Filters are regenerated on every user input.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.RefreshMode.OnEnter">
            <summary>
            Filters are regenerated whenever the user presses Enter while
            the focus is in one of the filter controls.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.RefreshMode.OnLeave">
            <summary>
            Filters are regenerated whenever one of the filter controls
            looses input focus.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.RefreshMode.OnEnterOrLeave">
            <summary>
            Filters are regenerated whenever one of the filter controls
            looses input focus or the user presses Enter while
            the focus is in one of the filter controls.
            </summary>
        </member>
        <member name="F:SAN.UI.DataGridView.RefreshMode.Off">
            <summary>
            No automatic filter generation.
            </summary>
        </member>
    </members>
</doc>
